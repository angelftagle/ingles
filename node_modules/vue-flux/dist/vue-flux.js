var Dt = Object.defineProperty;
var St = (r, t, e) => t in r ? Dt(r, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : r[t] = e;
var h = (r, t, e) => (St(r, typeof t != "symbol" ? t + "" : t, e), e);
import { openBlock as m, createElementBlock as D, renderSlot as O, createElementVNode as P, ref as g, computed as C, defineComponent as $, reactive as k, normalizeStyle as X, unref as d, Fragment as Z, renderList as q, createBlock as w, resolveDynamicComponent as E, mergeProps as G, onBeforeUpdate as gt, onMounted as lt, onUnmounted as at, createCommentVNode as T, nextTick as U, shallowReactive as et, toRaw as vt, watch as nt, normalizeClass as st, createTextVNode as Ct, toDisplayString as wt, withCtx as W, Transition as zt, createVNode as J } from "vue";
const Pt = (r, t) => {
  const e = r.__vccOpts || r;
  for (const [o, s] of t)
    e[o] = s;
  return e;
}, Lt = {}, Rt = {
  type: "button",
  class: "flux-button",
  style: { outline: "0" }
}, Et = {
  viewBox: "0 0 100 100",
  xmlns: "http://www.w3.org/2000/svg",
  version: "1.1"
}, Tt = /* @__PURE__ */ P("circle", {
  cx: "50",
  cy: "50",
  r: "50"
}, null, -1), Ft = { viewBox: "-20 -20 140 140" };
function Ot(r, t) {
  return m(), D("button", Rt, [
    (m(), D("svg", Et, [
      Tt,
      (m(), D("svg", Ft, [
        O(r.$slots, "default")
      ]))
    ]))
  ]);
}
const Q = /* @__PURE__ */ Pt(Lt, [["render", Ot]]), Bt = (r) => Math.round(r), Y = (r) => Math.floor(r), A = (r) => Math.ceil(r), $t = ({ width: r, height: t }) => A(Math.sqrt(r * r + t * t)), rt = ({
  width: r,
  height: t
}) => r / t;
class I {
  constructor({
    top: t = null,
    left: e = null
  } = {
    top: null,
    left: null
  }) {
    h(this, "top", g(null));
    h(this, "left", g(null));
    this.update({ top: t, left: e });
  }
  reset() {
    this.top.value = null, this.left.value = null;
  }
  isValid() {
    return ![this.top.value, this.left.value].includes(null);
  }
  update({ top: t, left: e }) {
    this.top.value = t ?? null, this.left.value = e ?? null;
  }
  toValue() {
    const t = {};
    return this.top.value !== null && (t.top = this.top.value), this.left.value !== null && (t.left = this.left.value), t;
  }
  toPx() {
    if (!this.isValid())
      throw new RangeError("Invalid position in pixels");
    return {
      top: this.top.value.toString() + "px",
      left: this.left.value.toString() + "px"
    };
  }
}
class R {
  constructor({
    width: t = null,
    height: e = null
  } = { width: null, height: null }) {
    h(this, "width", g(null));
    h(this, "height", g(null));
    this.update({ width: t, height: e });
  }
  reset() {
    this.width.value = null, this.height.value = null;
  }
  isValid() {
    return ![this.width.value, this.height.value].includes(null);
  }
  update({
    width: t,
    height: e
  }) {
    this.width.value = t ?? null, this.height.value = e ?? null;
  }
  getAspectRatio() {
    if (!this.isValid())
      throw new RangeError("Could not get aspect ratio due to invalid size");
    return rt(this.toValue());
  }
  clone() {
    return new R(this.toValue());
  }
  equals(t) {
    return !(this.width.value !== t.width.value || this.height.value !== t.height.value);
  }
  toValue() {
    const t = {};
    return this.width.value !== null && (t.width = this.width.value), this.height.value !== null && (t.height = this.height.value), t;
  }
  toPx() {
    if (!this.isValid())
      throw new RangeError("Invalid size in pixels");
    return {
      width: this.width.value.toString() + "px",
      height: this.height.value.toString() + "px"
    };
  }
}
var F = /* @__PURE__ */ ((r) => (r.fill = "fill", r.fit = "fit", r))(F || {});
class Vt {
  constructor(t, e, o = F.fill, s = null, n, a, u) {
    h(this, "src");
    h(this, "loader", null);
    h(this, "errorMessage");
    h(this, "status", g(H.notLoaded));
    h(this, "realSize", new R());
    h(this, "displaySize", new R());
    h(this, "caption", "");
    h(this, "resizeType");
    h(this, "backgroundColor", null);
    h(this, "display");
    h(this, "transition");
    h(this, "isLoading", () => this.status.value === H.loading);
    h(this, "isLoaded", () => this.status.value === H.loaded);
    h(this, "isError", () => this.status.value === H.error);
    h(this, "resizeProps", C(() => this.calcResizeProps(this.displaySize)));
    this.src = t, this.caption = e, this.resizeType = o, this.backgroundColor = s, this.display = n, this.transition = a, this.errorMessage = u;
  }
  calcResizeProps(t) {
    if ([t.isValid(), this.realSize.isValid()].includes(!1))
      return {};
    const e = new At(this.realSize), { size: o, position: s } = e.resizeTo(t, this.resizeType);
    return {
      ...o.toValue(),
      ...s.toValue()
    };
  }
  getResizeProps(t, e) {
    const o = {
      width: 0,
      height: 0,
      top: 0,
      left: 0
    };
    return this.displaySize.isValid() || this.displaySize.update(t.toValue()), Object.assign(
      o,
      t.equals(this.displaySize) ? this.resizeProps.value : this.calcResizeProps(t)
    ), e !== void 0 && (o.top -= e.top.value || 0, o.left -= e.left.value || 0), o;
  }
}
const it = /* @__PURE__ */ $({
  __name: "FluxImage",
  props: {
    color: {},
    rsc: {},
    size: {},
    viewSize: {},
    offset: {},
    css: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      base: {
        overflow: "hidden"
      },
      color: C(() => {
        var p, f;
        const i = {};
        return e.color !== void 0 && (i.backgroundColor = e.color), ((p = e.rsc) == null ? void 0 : p.backgroundColor) !== null && (i.backgroundColor = (f = e.rsc) == null ? void 0 : f.backgroundColor), i;
      }),
      rsc: C(() => {
        const { rsc: i, size: p, offset: f } = e;
        if (!i)
          return {};
        if (i.status.value === H.notLoaded)
          return i.load(), {};
        if (!i.isLoaded() || !p.isValid() || !o.value)
          return {};
        const { width: y, height: _, top: v, left: S } = i.getResizeProps(p, f);
        return {
          backgroundImage: `url(${i.src})`,
          backgroundSize: `${y}px ${_}px`,
          backgroundPosition: `${S}px ${v}px`,
          backgroundRepeat: "no-repeat"
        };
      })
    }), { style: n, setCss: a, transform: u, show: c, hide: l } = tt(
      o,
      e,
      s
    );
    return t({
      setCss: a,
      transform: u,
      show: c,
      hide: l
    }), (i, p) => (m(), D("div", {
      ref_key: "$el",
      ref: o,
      class: "flux-image",
      style: X(d(n))
    }, null, 4));
  }
});
var _t = /* @__PURE__ */ ((r) => (r.notLoaded = "notLoaded", r.loading = "loading", r.loaded = "loaded", r.error = "error", r))(_t || {});
const H = _t;
class Me extends Vt {
  constructor(t, e = "", o = F.fill, s = null) {
    const n = {
      component: it,
      props: {}
    }, a = {
      component: it,
      props: {}
    }, u = `Image ${t} could not be loaded`;
    super(
      t,
      e,
      o,
      s,
      n,
      a,
      u
    );
  }
  load() {
    return this.loader !== null ? this.loader : (this.loader = new Promise((t, e) => {
      this.status.value = H.loading;
      const o = new Image();
      o.onload = () => this.onLoad(o, t), o.onerror = () => this.onError(e), o.src = this.src;
    }), this.loader);
  }
  onLoad(t, e) {
    this.realSize = new R({
      width: t.naturalWidth || t.width,
      height: t.naturalHeight || t.height
    }), this.status.value = H.loaded, e();
  }
  onError(t) {
    this.status.value = H.error, t(this.errorMessage);
  }
}
const ht = (r) => r >= 1 ? "landscape" : "portrait";
class At {
  constructor(t) {
    h(this, "realSize");
    h(this, "realAspectRatio");
    h(this, "realOrientation");
    if (t.isValid() === !1)
      throw new RangeError("Invalid real size");
    this.realSize = t, this.realAspectRatio = this.realSize.getAspectRatio(), this.realOrientation = ht(this.realAspectRatio);
  }
  resizeTo(t, e) {
    if (t.isValid() === !1)
      throw new RangeError("Invalid size to resize");
    const o = t.getAspectRatio(), s = ht(o), n = this.getAdaptedSize(
      t,
      o,
      s,
      e
    ), a = this.getAdaptedPosition(
      t,
      o,
      n,
      e
    );
    return {
      size: n,
      position: a
    };
  }
  getAdaptedSize(t, e, o, s) {
    return o === "landscape" && this.realOrientation === "portrait" && s === F.fill ? this.getAdaptedSizeByWith(t) : o === "landscape" && this.realOrientation === "landscape" && e >= this.realAspectRatio && s === F.fill ? this.getAdaptedSizeByWith(t) : o === "landscape" && this.realOrientation === "landscape" && e < this.realAspectRatio && s === F.fit ? this.getAdaptedSizeByWith(t) : o === "portrait" && this.realOrientation === "landscape" && s === F.fit ? this.getAdaptedSizeByWith(t) : o === "portrait" && this.realOrientation === "portrait" && e > this.realAspectRatio && s === F.fill ? this.getAdaptedSizeByWith(t) : o === "portrait" && this.realOrientation === "portrait" && e <= this.realAspectRatio && s === F.fit ? this.getAdaptedSizeByWith(t) : this.getAdaptedSizeByHeight(t);
  }
  getAdaptedSizeByWith(t) {
    return new R({
      width: t.width.value,
      height: t.width.value / this.realAspectRatio
    });
  }
  getAdaptedSizeByHeight(t) {
    return new R({
      width: this.realAspectRatio * t.height.value,
      height: t.height.value
    });
  }
  getAdaptedPosition(t, e, o, s) {
    return this.realAspectRatio <= e && s === F.fill ? this.getAdaptedPositionVertically(t, o) : this.realAspectRatio > e && s === F.fit ? this.getAdaptedPositionVertically(t, o) : this.getAdaptedPositionHorizontally(t, o);
  }
  getAdaptedPositionVertically(t, e) {
    return new I({
      top: (t.height.value - e.height.value) / 2,
      left: 0
    });
  }
  getAdaptedPositionHorizontally(t, e) {
    return new I({
      top: 0,
      left: (t.width.value - e.width.value) / 2
    });
  }
}
class Wt {
  constructor(t, e, o, s, n, a, u) {
    h(this, "rscs", []);
    h(this, "counter", {
      success: 0,
      error: 0,
      total: 0
    });
    h(this, "toPreload");
    h(this, "preLoading", []);
    h(this, "lazyLoading", []);
    h(this, "progress", g(0));
    h(this, "displaySize");
    h(this, "onPreloadStart");
    h(this, "onPreloadEnd");
    h(this, "onLazyLoadStart");
    h(this, "onLazyLoadEnd");
    this.rscs = t, this.toPreload = e > t.length ? t.length : e, this.displaySize = o, this.onPreloadStart = s, this.onPreloadEnd = n, this.onLazyLoadStart = a, this.onLazyLoadEnd = u, this.preloadStart();
  }
  preloadStart() {
    this.onPreloadStart();
    const { counter: t } = this, e = this.rscs.slice(
      t.total,
      t.total + this.toPreload - t.success
    );
    this.preLoading = this.preLoading.concat(e), e.forEach((o) => this.load(o));
  }
  preloadEnd() {
    const { counter: t, toPreload: e } = this;
    if (t.success < e && t.total < e) {
      this.preloadStart();
      return;
    }
    const o = this.preLoading.filter(
      (s) => s.resource.isLoaded()
    );
    this.onPreloadEnd(o), this.preLoading.length = 0, t.total < this.rscs.length && this.lazyLoadStart();
  }
  lazyLoadStart() {
    this.onLazyLoadStart(), this.lazyLoading = this.rscs.slice(this.counter.total), this.lazyLoading.forEach((t) => this.load(t));
  }
  lazyLoadEnd() {
    const t = this.lazyLoading.filter(
      (e) => e.resource.isLoaded()
    );
    this.onLazyLoadEnd(t), this.lazyLoading.length = 0;
  }
  load(t) {
    t.resource.load().then(() => {
      this.loadSuccess(t);
    }).catch((e) => {
      this.loadError(e);
    }).finally(() => {
      this.counter.total++, this.preLoading.length !== 0 && this.updateProgress(), this.counter.total === this.toPreload ? this.preloadEnd() : this.counter.total === this.rscs.length && this.lazyLoadEnd();
    });
  }
  loadSuccess(t) {
    this.counter.success++, t.resource.displaySize.update(this.displaySize.toValue());
  }
  loadError(t) {
    this.counter.error++, console.error(t);
  }
  updateProgress() {
    this.progress.value = A(this.counter.success * 100 / this.toPreload) || 0;
  }
}
function tt(r, t, e) {
  e.base === void 0 && (e.base = {});
  const o = C(() => {
    const { size: l, viewSize: i = new R() } = t, { width: p = l.width.value, height: f = l.height.value } = i.toValue(), y = new R({ width: p, height: f });
    return y.isValid() ? y.toPx() : {};
  }), s = C(() => ({
    ...d(o),
    ...d(e.color),
    ...d(e.rsc),
    ...d(t.css),
    ...d(e.base)
  })), n = (l) => {
    Object.assign(e.base, l);
  };
  return {
    style: s,
    setCss: n,
    transform: (l) => {
      r.value !== null && (r.value.clientHeight, n(l));
    },
    show: () => {
      n({
        visibility: "visible"
      });
    },
    hide: () => {
      n({
        visibility: "hidden"
      });
    }
  };
}
const ft = {
  x: {
    top: "90",
    bottom: "-90"
  },
  y: {
    back: "180",
    backr: "180",
    backl: "-180",
    left: "-90",
    right: "90"
  }
}, mt = {
  x: {
    left: "-50",
    right: "50"
  },
  y: {
    top: "-50",
    bottom: "50"
  }
};
class Nt {
  constructor(t, e, o) {
    h(this, "depth");
    h(this, "size");
    h(this, "viewSize");
    h(this, "translateZ", C(() => {
      const t = this.depth / 2, { width: e, height: o } = this.size.toValue(), { width: s, height: n } = this.viewSize.toValue();
      return {
        front: 0,
        back: this.depth,
        backr: this.depth,
        backl: this.depth,
        left: t,
        right: (s ?? e) - t,
        top: t,
        bottom: (n ?? o) - t
      };
    }));
    this.depth = t, this.size = e, this.viewSize = o;
  }
  getRotate(t) {
    const e = ft.x[t] ?? "0", o = ft.y[t] ?? "0";
    return `rotateX(${e}deg) rotateY(${o}deg)`;
  }
  getTranslate(t) {
    const e = mt.x[t] ?? "0", o = mt.y[t] ?? "0", s = this.translateZ.value[t].toString();
    return `translate3d(${e}%, ${o}%, ${s}px)`;
  }
  getSideCss(t) {
    return `${this.getRotate(t)} ${this.getTranslate(t)}`;
  }
}
class Mt {
  static getProps(t, e, o, s, n) {
    const { depth: a, size: u, viewSize: c } = t, l = {
      name: e,
      component: s ? s.transition.component : it,
      color: o,
      rsc: s,
      size: u.clone(),
      viewSize: c.clone(),
      offset: n,
      style: {
        position: "absolute",
        transform: t.getSideCss(e),
        backfaceVisibility: "hidden"
      }
    };
    return ["left", "right"].includes(e) && (l.viewSize.width.value = a, l.size.width.value = a), ["top", "bottom"].includes(e) && (l.viewSize.height.value = a, l.size.height.value = a), l;
  }
}
var ot = /* @__PURE__ */ ((r) => (r.front = "front", r.back = "back", r.left = "left", r.right = "right", r.top = "top", r.bottom = "bottom", r))(ot || {});
function Xt(r, t, e) {
  return !!(t && t[r] || e && e[r]);
}
function Yt(r, t, e, o) {
  const s = Object.values(ot);
  return r || e ? s : Object.values(ot).filter(
    (n) => Xt(n, t, o)
  );
}
class jt {
  static getSidesProps(t, e, o, s, n, a, u) {
    const c = Yt(e, o, s, n), l = {};
    return c.forEach((i) => {
      l[i] = Mt.getProps(
        t,
        i,
        o && o[i] ? o[i] : e,
        n && n[i] ? n[i] : s,
        u && u[i] ? u[i] : a
      );
    }), l;
  }
}
const ct = /* @__PURE__ */ $({
  __name: "FluxCube",
  props: {
    colors: { default: () => ({}) },
    rscs: { default: () => ({}) },
    offsets: { default: () => ({}) },
    depth: { default: 0 },
    origin: {},
    color: {},
    rsc: {},
    size: {},
    viewSize: { default: () => new R() },
    offset: {},
    css: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = C(
      () => e.origin !== void 0 ? e.origin : `center center -${e.depth / 2}px`
    ), n = k({
      base: {
        transformStyle: "preserve-3d",
        transformOrigin: s
      }
    }), { style: a, setCss: u, transform: c, show: l, hide: i } = tt(
      o,
      e,
      n
    ), p = C(
      () => new Nt(e.depth, e.size, e.viewSize)
    ), f = C(
      () => jt.getSidesProps(
        p.value,
        e.color,
        e.colors,
        e.rsc,
        e.rscs,
        e.offset,
        e.offsets
      )
    );
    return t({
      setCss: u,
      transform: c,
      show: l,
      hide: i,
      turn: (_) => c({ transform: p.value.getRotate(_) })
    }), (_, v) => (m(), D("div", {
      ref_key: "$el",
      ref: o,
      class: "flux-cube",
      style: X(d(a))
    }, [
      (m(!0), D(Z, null, q(f.value, (S) => (m(), w(E(S.component), G({
        key: S.name
      }, S), null, 16))), 128))
    ], 4));
  }
});
var K = /* @__PURE__ */ ((r) => (r.front = "front", r.back = "back", r.backr = "backr", r.backl = "backl", r.left = "left", r.right = "right", r.top = "top", r.bottom = "bottom", r))(K || {});
function bt(r, t) {
  return Y(r / t);
}
function xt(r, t) {
  return r % t;
}
class Ht {
  static getProps(t, e) {
    let { width: o, height: s } = e.size.toValue();
    const n = bt(e.number, t.numCols), a = xt(e.number, t.numCols), u = {
      color: t.color,
      colors: t.colors,
      rsc: t.rsc,
      rscs: t.rscs,
      size: t.size,
      depth: t.depth,
      offset: new I({
        top: n * s,
        left: a * o
      })
    };
    return n + 1 === t.numRows && (s = t.size.height.value - n * s), a + 1 === t.numCols && (o = t.size.width.value - a * o), u.viewSize = new R({
      width: o,
      height: s
    }), u.css = {
      ...e.css,
      position: "absolute",
      ...u.offset.toPx(),
      zIndex: e.number + 1 < t.numTiles / 2 ? e.number + 1 : t.numTiles - e.number
    }, u;
  }
}
class It {
  static getTilesProps(t) {
    const { rows: e, cols: o, size: s, color: n, colors: a, rsc: u, rscs: c, depth: l } = t, i = A(e), p = A(o), f = {
      numRows: i,
      numCols: p,
      numTiles: i * p,
      size: s,
      depth: l,
      color: n,
      colors: a,
      rsc: u,
      rscs: c
    }, y = {
      number: 0,
      size: new R({
        width: Y(s.width.value / p),
        height: Y(s.height.value / i)
      }),
      css: t.tileCss
    }, _ = [];
    for (let v = 0; v < f.numTiles; v++)
      y.number = v, _.push(Ht.getProps(f, y));
    return _;
  }
}
const N = /* @__PURE__ */ $({
  __name: "FluxGrid",
  props: {
    colors: {},
    rscs: {},
    rows: { default: 1 },
    cols: { default: 1 },
    depth: { default: 0 },
    tileCss: {},
    color: {},
    rsc: {},
    size: {},
    viewSize: {},
    offset: {},
    css: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      base: {
        position: "relative"
      }
    }), { style: n, setCss: a, show: u, hide: c } = tt(
      o,
      e,
      s
    ), l = C(
      () => {
        var y;
        return e.rscs !== void 0 ? ct : (y = e.rsc) == null ? void 0 : y.transition.component;
      }
    ), i = C(() => It.getTilesProps(e)), p = g([]);
    return gt(() => {
      p.value = [];
    }), t({
      setCss: a,
      transform: (y) => {
        p.value.forEach((_, v) => y(_, v));
      },
      show: u,
      hide: c,
      getRowNumber: bt,
      getColNumber: xt
    }), (y, _) => (m(), D("div", {
      ref_key: "$el",
      ref: o,
      class: "flux-grid",
      style: X(d(n))
    }, [
      (m(!0), D(Z, null, q(i.value, (v, S) => (m(), w(E(l.value), G({
        ref_for: !0,
        ref: (B) => p.value.push(B),
        key: S
      }, v), null, 16))), 128))
    ], 4));
  }
}), Xe = /* @__PURE__ */ $({
  __name: "FluxParallax",
  props: {
    rsc: {},
    holder: { default: () => window },
    type: { default: "relative" },
    offset: { default: "100%" }
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), { holder: s, rsc: n } = e, a = {
      base: {
        position: "relative",
        background: `url("${n.src}") no-repeat`
      },
      defined: k({}),
      final: C(() => ({
        ...a.base,
        ...d(a.defined)
      }))
    }, u = (/iPad|iPhone|iPod/.test(navigator.userAgent) || navigator.userAgent === "MacIntel" && navigator.maxTouchPoints > 1) && !window.MSStream, c = k({
      width: 0,
      height: 0,
      aspectRatio: C(() => rt(c))
    }), l = k({
      top: 0,
      width: 0,
      height: 0,
      aspectRatio: C(() => rt(l))
    }), i = k({
      top: 0,
      left: 0,
      width: 0,
      height: 0
    }), p = {
      position: "absolute",
      top: 0,
      left: 0,
      bottom: 0,
      right: 0,
      clip: "rect(auto auto auto auto)"
    }, f = C(() => ({
      position: "absolute",
      top: 0,
      bottom: 0,
      left: 0,
      right: 0,
      background: `url("${n.src}") no-repeat center center fixed`,
      backgroundSize: `${i.width}px ${i.height}px`
    })), y = C(() => {
      const { offset: z } = e, b = parseFloat(z);
      return /^[0-9]+px$/.test(z) ? {
        px: b,
        pct: b * 100 / i.height
      } : /^[0-9]+%$/.test(z) ? {
        px: A(l.height * b / 100),
        pct: b
      } : {
        px: 0,
        pct: 0
      };
    }), _ = C(() => {
      const z = u ? c.height : l.height + y.value.px;
      return i.height - z;
    });
    lt(() => {
      window.addEventListener("resize", v, {
        passive: !0
      }), (e.type !== "fixed" || u) && s.addEventListener("scroll", B, {
        passive: !0
      }), n.load().then(() => {
        v();
      });
    }), at(() => {
      window.removeEventListener("resize", v), s.removeEventListener("scroll", B);
    });
    const v = () => {
      c.width = s.scrollWidth || s.innerWidth, c.height = s.scrollHeight || s.innerHeight, l.width = o.value.clientWidth, l.height = o.value.clientHeight, l.top = o.value.getBoundingClientRect().top + window.scrollY, n.displaySize.update(c);
      const z = n.resizeProps.value;
      i.width = z.width, i.height = z.height, a.defined.backgroundSize = `${i.width}px ${i.height}px`, a.defined.backgroundPosition = "center 0", B();
    }, S = (z) => {
      _.value > 0 && (z = z * y.value.pct / 100 + 50 - y.value.pct / 2), a.defined.backgroundPositionY = z.toFixed(2) + "%";
    }, B = () => {
      if (!n.isLoaded() || !u && e.type === "fixed")
        return;
      const z = s.scrollY || s.scrollTop || 0;
      if (s !== window)
        return j.relative(z);
      if (z + c.height < l.top || z > l.top + l.height)
        return;
      let b = z - l.top + c.height;
      j[e.type](b);
    }, j = {
      visible: (z) => {
        let b = 0;
        z < l.height ? b = 0 : z > c.height ? b = 100 : b = (z - l.height) * 100 / (c.height - l.height), S(b);
      },
      relative: (z) => {
        let b;
        s === window ? b = z * 100 / (c.height + l.height) : b = z * 100 / (c.height - s.clientHeight), S(b);
      },
      fixed: (z) => {
        a.defined.backgroundPositionY = z - c.height + "px";
      }
    };
    return t({
      resize: v
    }), (z, b) => (m(), D("div", {
      ref_key: "$el",
      ref: o,
      class: "flux-parallax",
      style: X(a.final.value)
    }, [
      e.type === "fixed" && !d(u) ? (m(), D("div", {
        key: 0,
        style: p
      }, [
        P("div", {
          class: "image",
          style: X(f.value)
        }, null, 4)
      ])) : T("", !0),
      O(z.$slots, "default")
    ], 4));
  }
}), Gt = /* @__PURE__ */ $({
  __name: "FluxTransition",
  props: {
    size: {},
    transition: {},
    from: {},
    to: {},
    displayComponent: {},
    options: { default: () => ({}) }
  },
  emits: ["ready", "start", "end"],
  setup(r, { expose: t, emit: e }) {
    const o = r, s = g(null), n = g(null), a = e, u = k({
      base: {
        overflow: "hidden",
        perspective: "none",
        zIndex: 3
      }
    }), c = C(() => {
      const { width: f, height: y } = o.size.toPx();
      return {
        ...u.base,
        width: f,
        height: y
      };
    }), l = g(1);
    lt(async () => {
      await U(), n.value !== null && (l.value = n.value.totalDuration), a("ready", {
        transition: o.transition,
        from: o.from,
        to: o.to,
        options: o.options,
        duration: l.value
      });
    });
    async function i() {
      a("start", {
        transition: o.transition,
        from: o.from,
        to: o.to,
        options: o.options,
        duration: l.value
      }), await U(), n.value === null ? console.error("Transition component available", o.transition) : n.value.onPlay(), setTimeout(() => p(), l.value);
    }
    function p() {
      a("end", {
        transition: o.transition,
        from: o.from,
        to: o.to,
        options: o.options,
        duration: l.value
      });
    }
    return at(() => {
      o.displayComponent && o.displayComponent.show();
    }), t({ start: i }), (f, y) => (m(), D("div", {
      ref_key: "$el",
      ref: s,
      class: "flux-transition",
      style: X(c.value)
    }, [
      (m(), w(E(f.transition), {
        ref_key: "$transition",
        ref: n,
        size: f.size,
        from: f.from,
        to: f.to,
        "display-component": f.displayComponent,
        options: f.options,
        "mask-style": u.base
      }, null, 8, ["size", "from", "to", "display-component", "options", "mask-style"]))
    ], 4));
  }
});
class Kt {
  static getProps(t, e, o) {
    const s = (t.numCircles - e) * t.radius * 2, n = t.radius * e, a = {
      offset: new I({
        top: t.topGap + n,
        left: t.leftGap + n
      })
    };
    return a.css = {
      ...o,
      position: "absolute",
      ...a.offset.toPx(),
      width: s + "px",
      height: s + "px",
      backgroundRepeat: "repeat",
      borderRadius: "50%",
      zIndex: e
    }, a;
  }
}
class Ut {
  static getCirclesProps(t) {
    const { width: e, height: o } = t.size.toValue(), s = Bt(t.circles), n = $t({ width: e, height: o }), a = A(n / 2 / s), u = A(o / 2 - a * s), c = A(e / 2 - a * s), l = {
      numCircles: s,
      diagonal: n,
      radius: a,
      topGap: u,
      leftGap: c
    }, i = [];
    for (let p = 0; p < s; p++)
      i.push(
        Kt.getProps(l, p, t.tileCss)
      );
    return i;
  }
}
const kt = /* @__PURE__ */ $({
  __name: "FluxVortex",
  props: {
    rsc: {},
    circles: { default: 1 },
    tileCss: {},
    color: {},
    size: {},
    viewSize: {},
    offset: {},
    css: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      base: {
        position: "relative",
        overflow: "hidden"
      }
    }), { style: n, setCss: a, show: u, hide: c } = tt(
      o,
      e,
      s
    ), l = C(() => Ut.getCirclesProps(e)), i = g([]);
    return gt(() => {
      i.value = [];
    }), t({
      setCss: a,
      transform: (f) => {
        i.value.forEach((y, _) => f(y, _));
      },
      show: u,
      hide: c
    }), (f, y) => (m(), D("div", {
      ref_key: "$el",
      ref: o,
      class: "flux-vortex",
      style: X(d(n))
    }, [
      (m(!0), D(Z, null, q(l.value, (_, v) => (m(), w(E(f.rsc.transition.component), {
        ref_for: !0,
        ref: (S) => i.value.push(S),
        key: v,
        size: f.size,
        rsc: f.rsc,
        offset: _.offset,
        css: _.css
      }, null, 8, ["size", "rsc", "offset", "css"]))), 128))
    ], 4));
  }
}), ut = /* @__PURE__ */ $({
  __name: "FluxWrapper",
  props: {
    color: {},
    rsc: {},
    size: {},
    viewSize: {},
    offset: {},
    css: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      base: {
        overflow: "hidden"
      }
    }), { style: n, setCss: a, transform: u, show: c, hide: l } = tt(
      o,
      e,
      s
    );
    return t({
      setCss: a,
      transform: u,
      show: c,
      hide: l
    }), (i, p) => (m(), D("div", {
      ref_key: "$el",
      ref: o,
      class: "flux-wrapper",
      style: X(d(n))
    }, [
      O(i.$slots, "default")
    ], 4));
  }
});
var x = /* @__PURE__ */ ((r) => (r.prev = "prev", r.next = "next", r))(x || {}), V = /* @__PURE__ */ ((r) => (r.stopped = "stopped", r.playing = "playing", r))(V || {});
class Jt {
  constructor() {
    h(this, "current", null);
    h(this, "from", null);
    h(this, "to", null);
  }
  reset() {
    this.current = null, this.from = null, this.to = null;
  }
  init(t) {
    this.current = t.getFirst();
  }
}
class Zt {
  constructor() {
    h(this, "current", null);
    h(this, "last", null);
  }
  reset() {
    this.current = null, this.last = null;
  }
  init(t) {
    this.last = t.getLast();
  }
}
class qt {
  constructor(t) {
    h(this, "list", et([]));
    h(this, "loader", g(null));
    h(this, "emit");
    this.emit = t;
  }
  getPrev(t) {
    return this.getByIndex(
      t > 0 ? t - 1 : this.list.length - 1
    );
  }
  getNext(t) {
    return this.getByIndex(
      t === this.list.length - 1 ? 0 : t + 1
    );
  }
  getFirst() {
    return this.getByIndex(0);
  }
  getLast() {
    return this.getByOrder(x.prev, 0);
  }
  getByIndex(t) {
    if (this.list[t] === void 0)
      throw new ReferenceError(`Resource index ${t} not found`);
    return {
      index: t,
      rsc: this.list[t].resource,
      options: JSON.parse(JSON.stringify(this.list[t].options))
    };
  }
  getByOrder(t, e) {
    return {
      prev: () => this.getPrev(e),
      next: () => this.getNext(e)
    }[t]();
  }
  find(t, e) {
    if (typeof t == "number")
      return this.getByIndex(t);
    if (e === void 0)
      throw new ReferenceError("Missing currentIndex parameter");
    return this.getByOrder(t, e);
  }
  update(t, e, o) {
    this.list.splice(0);
    const s = vt(t).map((a) => {
      let u = a, c = {};
      return "resource" in a && (u = a.resource, "options" in a && (c = a.options)), { resource: u, options: c };
    });
    return new Promise((a) => {
      this.loader.value = new Wt(
        s,
        e,
        o,
        () => this.preloadStart(),
        (u) => this.preloadEnd(u, a),
        () => this.lazyLoadStart(),
        (u) => this.lazyLoadEnd(u)
      );
    });
  }
  preloadStart() {
    this.emit("resourcesPreloadStart");
  }
  preloadEnd(t, e) {
    t.forEach((o) => this.list.push(o)), this.emit("resourcesPreloadEnd"), e();
  }
  lazyLoadStart() {
    this.emit("resourcesLazyloadStart");
  }
  lazyLoadEnd(t) {
    t.forEach((e) => this.list.push(e)), this.emit("resourcesLazyloadEnd");
  }
}
class Qt {
  constructor() {
    h(this, "list", et([]));
  }
  getPrev(t) {
    return this.getByIndex(
      t > 0 ? t - 1 : this.list.length - 1
    );
  }
  getNext(t) {
    return this.getByIndex(
      t === this.list.length - 1 ? 0 : t + 1
    );
  }
  getFirst() {
    return this.getByIndex(0);
  }
  getLast() {
    return this.getByOrder(x.prev, 0);
  }
  getByIndex(t) {
    return {
      index: t,
      component: this.list[t].component,
      options: JSON.parse(JSON.stringify(this.list[t].options))
    };
  }
  getByOrder(t, e) {
    return {
      prev: () => this.getPrev(e),
      next: () => this.getNext(e)
    }[t]();
  }
  update(t) {
    this.list.splice(0), vt(t).forEach((e) => {
      let o = e, s = {};
      "component" in e && (o = e.component, "options" in e && (s = e.options)), this.list.push({ component: o, options: s });
    });
  }
}
class te {
  constructor(t, e, o) {
    h(this, "resource");
    h(this, "transition");
    h(this, "status", g(V.stopped));
    h(this, "config");
    h(this, "timers");
    h(this, "emit");
    h(this, "resources");
    h(this, "transitions");
    h(this, "$displayComponent", g(null));
    this.config = t, this.timers = e, this.emit = o, this.resources = new qt(o), this.transitions = new Qt(), this.resource = et(new Jt()), this.transition = et(new Zt());
  }
  setup(t) {
    this.$displayComponent = t;
  }
  play(t = x.next, e) {
    var u, c;
    const { config: o, timers: s, resource: n } = this;
    if (this.status.value = V.playing, this.transition.current !== null)
      return;
    const a = (c = this.resources) == null ? void 0 : c.find(t, (u = n.current) == null ? void 0 : u.index);
    s.set(
      "transition",
      e || (a == null ? void 0 : a.options.delay) || o.delay,
      () => {
        this.show(t);
      }
    ), this.emit("play", t, e);
  }
  async stop(t = !1) {
    const { timers: e } = this;
    this.status.value = V.stopped, e.clear("transition"), this.transition.current !== null && t === !0 && await this.end(t), this.emit("stop");
  }
  isReadyToShow() {
    if (this.resource.current === null)
      throw new ReferenceError("Current resource not set");
    if (this.resources === null)
      throw new ReferenceError("Resources list not set");
    if (this.resources.list.length === 0)
      throw new RangeError("Resources list empty");
    if (this.transition.last === null)
      throw new ReferenceError("Last transition not set");
    if (this.transitions === null)
      throw new ReferenceError("Transitions list not set");
    if (this.transitions.list.length === 0)
      throw new RangeError("Transitions list empty");
    if (this.$displayComponent.value === null)
      throw new ReferenceError("Display component not set");
    return !0;
  }
  async show(t = x.next, e = x.next) {
    if (!this.isReadyToShow())
      return;
    const { resource: o, resources: s, config: n, transitions: a } = this;
    if (this.transition.current !== null) {
      n.allowToSkipTransition && (await this.end(!0), this.show(t, e));
      return;
    }
    const u = s.find(
      t,
      o.current.index
    );
    if (o.current.index === u.index)
      return;
    this.timers.clear("transition"), this.resource.from = o.current, this.resource.to = u;
    const c = typeof e == "number" ? a.getByIndex(e) : a.getByOrder(
      e,
      this.transition.last.index
    );
    c.options.direction === void 0 && (typeof t != "number" ? c.options.direction = t : c.options.direction = this.resource.from.index < this.resource.to.index ? x.next : x.prev), this.transition.current = c, this.emit("show", this.resource, this.transition);
  }
  start() {
    this.resource.current = this.resource.to, this.emit("transitionStart", this.resource, this.transition);
  }
  async end(t = !1) {
    const { config: e, resource: o, resources: s, timers: n, transition: a } = this;
    if (!(o.current === null || s === null)) {
      if (a.last = a.current, a.current = null, await U(), this.emit(
        t ? "transitionCancel" : "transitionEnd",
        this.resource,
        this.transition
      ), e.infinite === !1 && o.current.index >= s.list.length - 1 && this.status.value === V.playing) {
        this.stop();
        return;
      }
      if (o.current.options.stop === !0) {
        this.stop();
        return;
      }
      this.status.value === V.playing && t === !1 && n.set(
        "transition",
        o.current.options.delay || e.delay,
        () => {
          this.show();
        }
      );
    }
  }
}
class pt {
  constructor(t, e = null, o = null) {
    h(this, "node");
    h(this, "config");
    h(this, "emit", null);
    h(this, "size", new R());
    h(this, "inFullScreen", () => !!document.fullscreenElement);
    this.node = t, this.config = e, this.emit = o;
  }
  static async getSize(t) {
    const e = new pt(t);
    return await e.updateSize(), e.size;
  }
  addResizeListener() {
    window.addEventListener("resize", () => this.updateSize(), {
      passive: !0
    });
  }
  removeResizeListener() {
    window.removeEventListener("resize", this.updateSize);
  }
  getAspectRatio() {
    if (this.config !== null) {
      const [t, e] = this.config.aspectRatio.split(":");
      return [parseFloat(t), parseFloat(e)];
    }
    return [16, 9];
  }
  async updateSize() {
    if (this.size.reset(), await U(), this.node.value === null)
      return;
    const t = getComputedStyle(this.node.value);
    let e = parseFloat(t.width), o = parseFloat(t.height);
    if (["0px", "auto", null].includes(t.height)) {
      const [s, n] = this.getAspectRatio();
      o = e / s * n;
    }
    this.size.update({
      width: e,
      height: o
    });
  }
  toggleFullScreen() {
    this.inFullScreen() ? this.exitFullScreen() : this.enterFullScreen();
  }
  async enterFullScreen() {
    var t, e;
    ((t = this.node) == null ? void 0 : t.value) === null || !((e = this.config) != null && e.allowFullscreen) || (await this.node.value.requestFullscreen(), this.emit !== null && this.emit("fullscreenEnter"));
  }
  async exitFullScreen() {
    await document.exitFullscreen(), this.emit !== null && this.emit("fullscreenExit");
  }
}
class ee {
  constructor(t, e) {
    h(this, "config");
    h(this, "player");
    this.config = t, this.player = e;
  }
  setup() {
    this.removeKeyListener(), this.config.bindKeys && this.addKeyListener();
  }
  addKeyListener() {
    window.addEventListener("keydown", (t) => this.keydown(t), {
      passive: !0
    });
  }
  removeKeyListener() {
    window.removeEventListener("keydown", () => this.keydown);
  }
  keydown(t) {
    if (["ArrowLeft", "Left"].includes(t.key)) {
      this.player.show(x.prev);
      return;
    }
    if (["ArrowRight", "Right"].includes(t.key)) {
      this.player.show(x.next);
      return;
    }
  }
}
class se {
  constructor() {
    h(this, "isOver", g(!1));
  }
  setup(t, e) {
    e.clear("mouseOver"), t.autohideTime === 0 && (this.isOver.value = !0);
  }
  toggle(t, e, o) {
    t.autohideTime !== 0 && (this.isOver.value = o, this[o ? "over" : "out"](t, e));
  }
  out(t, e) {
    e.clear("mouseOver");
  }
  over(t, e) {
    e.set(
      "mouseOver",
      t.autohideTime,
      () => this.isOver.value = !1
    );
  }
}
class oe {
  constructor() {
    h(this, "timers", {});
  }
  set(t, e, o) {
    this.clear(t), this.timers[t] = setTimeout(o, e);
  }
  clear(t) {
    (t !== void 0 ? [t] : Object.keys(this.timers)).forEach((o) => {
      clearTimeout(this.timers[o]), delete this.timers[o];
    });
  }
}
const yt = Math.abs;
class ne {
  constructor() {
    h(this, "startX", 0);
    h(this, "startY", 0);
    h(this, "startTime", 0);
    h(this, "endTime", 0);
    h(this, "prevTouchTime", 0);
    // Max distance in pixels from start until end
    h(this, "tapThreshold", 5);
    // Max time in ms from first to second tap
    h(this, "doubleTapThreshold", 200);
    // Distance in percentage to trigger slide
    h(this, "slideTrigger", 0.3);
    h(this, "tap", (t, e) => yt(t) < this.tapThreshold && yt(e) < this.tapThreshold);
    h(this, "doubleTap", () => this.endTime - this.prevTouchTime < this.doubleTapThreshold);
    h(this, "slideLeft", (t, e) => e.size.isValid() && t < 0 && t < -(e.size.width.value * this.slideTrigger));
    h(this, "slideRight", (t, e) => e.size.isValid() && t > 0 && t > e.size.width.value * this.slideTrigger);
    h(this, "slideUp", (t, e) => e.size.isValid() && t < 0 && t < -(e.size.height.value * this.slideTrigger));
    h(this, "slideDown", (t, e) => e.size.isValid() && t > 0 && t > e.size.height.value * this.slideTrigger);
  }
  start(t, e) {
    e.enableGestures && (this.startTime = Date.now(), this.startX = t.touches[0].clientX, this.startY = t.touches[0].clientY);
  }
  end(t, e, o, s, n, a) {
    this.prevTouchTime = this.endTime, this.endTime = Date.now();
    const u = t.changedTouches[0].clientX - this.startX, c = t.changedTouches[0].clientY - this.startY;
    if (this.tap(u, c)) {
      a.toggle(e, n, !0);
      return;
    }
    e.enableGestures && (this.slideRight(u, s) ? o.show(x.prev) : this.slideLeft(u, s) && o.show(x.next));
  }
}
const re = {
  key: 2,
  class: "complements"
}, ie = /* @__PURE__ */ P("div", { class: "remainder upper" }, null, -1), le = /* @__PURE__ */ P("div", { class: "remainder lower" }, null, -1), Ye = /* @__PURE__ */ $({
  __name: "VueFlux",
  props: {
    options: {},
    rscs: {},
    transitions: {}
  },
  emits: ["created", "mounted", "unmounted", "play", "stop", "show", "optionsUpdated", "transitionsUpdated", "resourcesPreloadStart", "resourcesPreloadEnd", "resourcesLazyloadStart", "resourcesLazyloadEnd", "fullscreenEnter", "fullscreenExit", "transitionStart", "transitionCancel", "transitionEnd"],
  setup(r, { expose: t, emit: e }) {
    const o = r, s = e, n = g(null), a = g(null), u = g(null), c = k({
      allowFullscreen: !1,
      allowToSkipTransition: !0,
      aspectRatio: "16:9",
      autohideTime: 2500,
      autoplay: !1,
      bindKeys: !1,
      delay: 5e3,
      enableGestures: !1,
      infinite: !0,
      lazyLoad: !0,
      lazyLoadAfter: 5
    }), l = new oe(), i = new te(c, l, s), p = i.resources, f = i.transitions, y = new pt(n, c, s), _ = new ee(c, i), v = new se(), S = new ne(), B = () => {
      Object.assign(c, o.options), v.setup(c, l), _.setup();
    };
    nt(
      () => o.options,
      () => {
        B(), s("optionsUpdated");
      },
      { deep: !0 }
    ), nt(
      () => o.rscs,
      async () => {
        const z = i.status.value === V.playing;
        z && await i.stop(!0), i.resource.reset();
        const b = c.lazyLoad ? c.lazyLoadAfter : o.rscs.length;
        await p.update(o.rscs, b, y.size), i.resource.init(p), z && i.play();
      }
    ), nt(
      () => o.transitions,
      async () => {
        const z = i.status.value === V.playing;
        z && await i.stop(!0), i.transition.reset(), f.update(o.transitions), i.transition.init(f), z && i.play(), s("transitionsUpdated");
      }
    ), lt(async () => {
      B(), await y.updateSize(), y.addResizeListener(), i.setup(u), f.update(o.transitions), i.transition.init(f), await p.update(o.rscs, c.lazyLoadAfter, y.size), i.resource.init(p), c.autoplay === !0 && i.play(), s("mounted");
    }), at(() => {
      l.clear(), y.removeResizeListener(), _.removeKeyListener(), s("unmounted");
    });
    const j = C(() => y.size.isValid() ? y.inFullScreen() ? {
      width: "100% !important",
      height: "100% !important"
    } : y.size.toPx() : {});
    return t({
      show: i.show.bind(i),
      play: i.play.bind(i),
      stop: i.stop.bind(i),
      getPlayer: () => i,
      size: y.size
    }), s("created"), (z, b) => (m(), D("div", {
      ref_key: "$container",
      ref: n,
      class: "vue-flux",
      style: X(j.value),
      onMousemove: b[3] || (b[3] = (M) => d(v).toggle(c, d(l), !0)),
      onMouseleave: b[4] || (b[4] = (M) => d(v).toggle(c, d(l), !1)),
      onDblclick: b[5] || (b[5] = (M) => d(y).toggleFullScreen()),
      onTouchstart: b[6] || (b[6] = (M) => d(S).start(M, c)),
      onTouchend: b[7] || (b[7] = (M) => d(S).end(M, c, d(i), d(y), d(l), d(v)))
    }, [
      /* eslint-disable vue/html-indent */
      d(i).transition.current !== null && d(y).size.isValid() && d(i).resource.from !== null && d(i).resource.to !== null ? (m(), w(d(Gt), {
        key: 0,
        ref_key: "$transition",
        ref: a,
        transition: d(i).transition.current.component,
        size: d(y).size,
        from: d(i).resource.from.rsc,
        to: d(i).resource.to.rsc,
        "display-component": u.value,
        options: d(i).transition.current.options,
        onReady: b[0] || (b[0] = (M) => {
          var dt;
          return (dt = a.value) == null ? void 0 : dt.start();
        }),
        onStart: b[1] || (b[1] = (M) => d(i).start()),
        onEnd: b[2] || (b[2] = (M) => d(i).end())
      }, null, 8, ["transition", "size", "from", "to", "display-component", "options"])) : T("", !0),
      d(i).resource.current !== null ? (m(), w(E(d(i).resource.current.rsc.display.component), G({
        key: 1,
        ref_key: "$displayComponent",
        ref: u,
        size: d(y).size,
        rsc: d(i).resource.current.rsc
      }, d(i).resource.current.rsc.display.props), null, 16, ["size", "rsc"])) : T("", !0),
      d(y).size.isValid() ? (m(), D("div", re, [
        O(z.$slots, "preloader", {
          loader: d(p).loader
        }),
        O(z.$slots, "caption", { player: d(i) }),
        ie,
        O(z.$slots, "controls", {
          mouseOver: d(v).isOver,
          player: d(i)
        }),
        le,
        O(z.$slots, "index", {
          mouseOver: d(v).isOver,
          displaySize: d(y).size,
          player: d(i)
        }),
        O(z.$slots, "pagination", { player: d(i) })
      ])) : T("", !0)
    ], 36));
  }
}), je = /* @__PURE__ */ $({
  __name: "FluxCaption",
  props: {
    player: {}
  },
  setup(r) {
    const t = r, { resource: e, transition: o } = t.player, s = C(() => e.current === null || e.current.rsc.caption === null ? "&nbsp;" : e.current.rsc.caption), n = C(() => {
      const a = ["flux-caption"];
      return o.current === null && e.current !== null && e.current.rsc.caption.length > 0 && a.push("visible"), a;
    });
    return (a, u) => (m(), D("div", {
      class: st(n.value)
    }, [
      O(a.$slots, "default", { caption: s.value }, () => [
        Ct(wt(s.value), 1)
      ])
    ], 2));
  }
}), ae = /* @__PURE__ */ P("polyline", { points: "64,18 22,50 64,82" }, null, -1), ce = /* @__PURE__ */ $({
  __name: "Prev",
  setup(r) {
    return (t, e) => (m(), w(d(Q), { class: "prev top left" }, {
      default: W(() => [
        ae
      ]),
      _: 1
    }));
  }
}), ue = /* @__PURE__ */ P("polygon", { points: "32,12 82,50 32,88" }, null, -1), pe = /* @__PURE__ */ $({
  __name: "Play",
  setup(r) {
    return (t, e) => (m(), w(d(Q), { class: "play" }, {
      default: W(() => [
        ue
      ]),
      _: 1
    }));
  }
}), de = /* @__PURE__ */ P("line", {
  x1: "32",
  y1: "22",
  x2: "32",
  y2: "78"
}, null, -1), he = /* @__PURE__ */ P("line", {
  x1: "68",
  y1: "22",
  x2: "68",
  y2: "78"
}, null, -1), fe = /* @__PURE__ */ $({
  __name: "Stop",
  setup(r) {
    return (t, e) => (m(), w(d(Q), { class: "pause" }, {
      default: W(() => [
        de,
        he
      ]),
      _: 1
    }));
  }
}), me = /* @__PURE__ */ P("polyline", { points: "36,18 78,50 36,82" }, null, -1), ye = /* @__PURE__ */ $({
  __name: "Next",
  setup(r) {
    return (t, e) => (m(), w(d(Q), { class: "next top right" }, {
      default: W(() => [
        me
      ]),
      _: 1
    }));
  }
}), ge = {
  key: 0,
  class: "flux-controls"
}, He = /* @__PURE__ */ $({
  __name: "FluxControls",
  props: {
    mouseOver: { type: [Boolean, Object], default: void 0 },
    player: {}
  },
  setup(r) {
    const t = r, e = C(() => !(t.player.resource.current === null || t.mouseOver !== void 0 && d(t.mouseOver) === !1));
    return (o, s) => (m(), w(zt, { name: "fade" }, {
      default: W(() => [
        e.value ? (m(), D("div", ge, [
          J(ce, {
            onClick: s[0] || (s[0] = (n) => o.player.show(d(x).prev))
          }),
          o.player.status.value === d(V).stopped ? (m(), w(pe, {
            key: 0,
            onClick: s[1] || (s[1] = (n) => o.player.play(d(x).next, 1))
          })) : T("", !0),
          o.player.status.value === d(V).playing ? (m(), w(fe, {
            key: 1,
            onClick: s[2] || (s[2] = (n) => o.player.stop())
          })) : T("", !0),
          J(ye, {
            onClick: s[3] || (s[3] = (n) => o.player.show(d(x).next))
          })
        ])) : T("", !0)
      ]),
      _: 1
    }));
  }
}), ve = /* @__PURE__ */ P("rect", {
  x: "17.5",
  y: "17.5",
  width: "12px",
  height: "12px"
}, null, -1), we = /* @__PURE__ */ P("rect", {
  x: "17.5",
  y: "43",
  width: "12px",
  height: "12px"
}, null, -1), ze = /* @__PURE__ */ P("rect", {
  x: "17.5",
  y: "68.5",
  width: "12px",
  height: "12px"
}, null, -1), $e = /* @__PURE__ */ P("rect", {
  x: "43",
  y: "17.5",
  width: "12px",
  height: "12px"
}, null, -1), _e = /* @__PURE__ */ P("rect", {
  x: "43",
  y: "43",
  width: "12px",
  height: "12px"
}, null, -1), be = /* @__PURE__ */ P("rect", {
  x: "43",
  y: "68.5",
  width: "12px",
  height: "12px"
}, null, -1), xe = /* @__PURE__ */ P("rect", {
  x: "68.5",
  y: "17.5",
  width: "12px",
  height: "12px"
}, null, -1), ke = /* @__PURE__ */ P("rect", {
  x: "68.5",
  y: "43",
  width: "12px",
  height: "12px"
}, null, -1), De = /* @__PURE__ */ P("rect", {
  x: "68.5",
  y: "68.5",
  width: "12px",
  height: "12px"
}, null, -1), Se = /* @__PURE__ */ $({
  __name: "Button",
  props: {
    mouseOver: { type: [Boolean, Object], default: void 0 }
  },
  setup(r) {
    const t = r, e = C(
      () => [!0, void 0].includes(d(t.mouseOver))
    );
    return (o, s) => (m(), w(zt, { name: "fade" }, {
      default: W(() => [
        e.value ? (m(), w(d(Q), {
          key: 0,
          class: "toggle bottom left"
        }, {
          default: W(() => [
            ve,
            we,
            ze,
            $e,
            _e,
            be,
            xe,
            ke,
            De
          ]),
          _: 1
        })) : T("", !0)
      ]),
      _: 1
    }));
  }
}), Ce = /* @__PURE__ */ $({
  __name: "Thumb",
  props: {
    rsc: {},
    size: {}
  },
  setup(r) {
    return (t, e) => (m(), D("li", null, [
      (m(), w(E(t.rsc.transition.component), {
        rsc: t.rsc,
        size: t.size.value,
        title: t.rsc.caption
      }, null, 8, ["rsc", "size", "title"]))
    ]));
  }
});
function Pe(r, t) {
  const e = C(() => {
    let { width: s, height: n } = r.toValue();
    return s = s / 4.2, n = s * 90 / 160, s > 160 && (s = 160, n = 90), new R({
      width: s,
      height: n
    });
  });
  function o(s) {
    const { current: n } = t.resource;
    return n === null || n.index !== s ? "" : "current";
  }
  return { size: e, getClass: o };
}
const Le = 500, Re = /* @__PURE__ */ $({
  __name: "List",
  props: {
    displaySize: {},
    player: {},
    mouseOver: { type: [Boolean, Object], default: void 0 }
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = g(!1), n = C(() => {
      const l = [];
      return s.value && l.push("visible"), l;
    });
    async function a() {
      o.value !== null && (e.player.stop(), s.value = !0, await U(), o.value.clientHeight, o.value.style.marginTop = "0");
    }
    function u(l) {
      var i;
      o.value !== null && ((i = e.player.resource.current) == null ? void 0 : i.index) !== l && (e.mouseOver !== void 0 && (o.value.clientHeight, o.value.style.marginTop = "100%"), setTimeout(() => {
        s.value = !1, l !== null && e.player.show(l);
      }, Le));
    }
    const c = Pe(e.displaySize, e.player);
    return t({ show: a }), (l, i) => (m(), D("nav", {
      class: st(n.value),
      onClick: i[0] || (i[0] = (p) => u(null))
    }, [
      P("ul", {
        ref_key: "$list",
        ref: o
      }, [
        (m(!0), D(Z, null, q(l.player.resources.list, (p, f) => (m(), w(Ce, {
          key: f,
          rsc: p.resource,
          size: d(c).size,
          class: st(d(c).getClass(f)),
          onClick: (y) => u(f)
        }, null, 8, ["rsc", "size", "class", "onClick"]))), 128))
      ], 512)
    ], 2));
  }
}), Ee = {
  key: 0,
  class: "flux-index"
}, Ie = /* @__PURE__ */ $({
  __name: "FluxIndex",
  props: {
    mouseOver: { type: [Boolean, Object], default: void 0 },
    displaySize: {},
    player: {}
  },
  setup(r) {
    const t = r, e = g(null), o = C(
      () => t.player.resources.list.length > 0
    );
    return (s, n) => o.value ? (m(), D("div", Ee, [
      s.mouseOver ? (m(), w(Se, {
        key: 0,
        "mouse-over": s.mouseOver,
        onClick: n[0] || (n[0] = (a) => {
          var u;
          return (u = e.value) == null ? void 0 : u.show();
        })
      }, null, 8, ["mouse-over"])) : T("", !0),
      J(Re, {
        ref_key: "$fluxIndexList",
        ref: e,
        "display-size": s.displaySize,
        player: s.player,
        "mouse-over": s.mouseOver
      }, null, 8, ["display-size", "player", "mouse-over"])
    ])) : T("", !0);
  }
}), Te = {
  key: 0,
  class: "flux-pagination"
}, Fe = ["title", "onClick"], Ge = /* @__PURE__ */ $({
  __name: "FluxPagination",
  props: {
    player: {}
  },
  setup(r) {
    const t = r, {
      player: { resources: e, resource: o, transition: s }
    } = t, n = C(() => e.list.length > 0), a = (c) => c.resource.caption, u = (c, l) => {
      var f;
      const i = [l];
      let p = ((f = o.current) == null ? void 0 : f.index) === c;
      return s.current !== null && (p = !1), p === !0 && i.push("active"), i;
    };
    return (c, l) => n.value ? (m(), D("nav", Te, [
      P("ul", null, [
        (m(!0), D(Z, null, q(c.player.resources.list, (i, p) => (m(), D("li", { key: p }, [
          O(c.$slots, "default", {
            index: p,
            rsc: i,
            title: a(i),
            cssClass: u(p, "custom-pagination-item")
          }, () => [
            P("span", {
              title: a(i),
              class: st(u(p, "pagination-item")),
              onClick: (f) => c.player.show(p)
            }, null, 10, Fe)
          ])
        ]))), 128))
      ])
    ])) : T("", !0);
  }
}), Oe = { class: "preloader" }, Be = {
  key: 0,
  class: "spinner"
}, Ve = { class: "pct" }, Ae = /* @__PURE__ */ P("div", { class: "border" }, null, -1), Ke = /* @__PURE__ */ $({
  __name: "FluxPreloader",
  props: {
    loader: {}
  },
  setup(r) {
    return (t, e) => {
      var o, s, n;
      return m(), D("div", Oe, [
        O(t.$slots, "default", {
          loader: t.loader,
          preloading: (o = t.loader.value) == null ? void 0 : o.preLoading.length,
          lazyloading: (s = t.loader.value) == null ? void 0 : s.lazyLoading.length,
          pct: (n = t.loader.value) == null ? void 0 : n.progress
        }, () => {
          var a, u;
          return [
            (a = t.loader.value) != null && a.preLoading.length ? (m(), D("div", Be, [
              P("div", Ve, wt((u = t.loader.value) == null ? void 0 : u.progress) + "%", 1),
              Ae
            ])) : T("", !0)
          ];
        })
      ]);
    };
  }
});
function L(r, t) {
  Object.assign(r, { direction: x.next }, t);
}
const Ue = /* @__PURE__ */ $({
  __name: "Fade",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      totalDuration: 1200,
      easing: "ease-in"
    });
    L(s, e.options);
    const n = {
      zIndex: 1
    };
    return t({
      onPlay: () => {
        o.value !== null && o.value.transform({
          transition: `opacity ${s.totalDuration}ms ${s.easing}`,
          opacity: 0
        });
      },
      totalDuration: s.totalDuration
    }), (u, c) => (m(), w(E(u.from.transition.component), {
      ref_key: "$from",
      ref: o,
      rsc: u.from,
      size: u.size,
      css: n
    }, null, 8, ["rsc", "size"]));
  }
}), Je = /* @__PURE__ */ $({
  __name: "Kenburn",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      totalDuration: 1500,
      easing: "linear"
    });
    L(s, e.options);
    const n = [
      {
        scale: "1.7",
        translateX: "-35%",
        translateY: "-35%",
        originX: "top",
        originY: "left"
      },
      {
        scale: "1.7",
        translateX: "35%",
        translateY: "-35%",
        originX: "top",
        originY: "right"
      },
      {
        scale: "1.7",
        translateX: "-35%",
        translateY: "35%",
        originX: "bottom",
        originY: "left"
      },
      {
        scale: "1.7",
        translateX: "35%",
        translateY: "35%",
        originX: "bottom",
        originY: "right"
      }
    ], a = Y(Math.random() * 4), u = n[a], c = {
      transformOrigin: u.originX + " " + u.originY
    };
    return t({
      onPlay: () => {
        o.value !== null && o.value.transform({
          transition: `all ${s.totalDuration}ms ${s.easing}`,
          transform: `scale(${u.scale}) translate(${u.translateX}, ${u.translateY})`,
          opacity: 0
        });
      },
      totalDuration: s.totalDuration
    }), (i, p) => (m(), w(E(i.from.transition.component), {
      ref_key: "$from",
      ref: o,
      rsc: i.from,
      size: i.size,
      css: c
    }, null, 8, ["rsc", "size"]));
  }
}), Ze = /* @__PURE__ */ $({
  __name: "Swipe",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = g(null), n = k({
      totalDuration: 1400,
      easing: "ease-in-out"
    });
    L(n, e.options);
    const a = {
      position: "absolute",
      top: 0,
      display: "flex",
      flexWrap: "nowrap"
    }, u = {
      flex: "0 0 auto"
    };
    return {
      [x.prev]: () => {
        Object.assign(a, {
          right: 0,
          justifyContent: "flex-end"
        });
      },
      [x.next]: () => {
        Object.assign(a, {
          left: 0,
          justifyContent: "flex-start"
        });
      }
    }[n.direction](), t({
      onPlay: () => {
        o.value !== null && o.value.transform({
          transition: `width ${n.totalDuration}ms ${n.easing}`,
          width: 0
        });
      },
      totalDuration: n.totalDuration
    }), (i, p) => (m(), w(d(ut), {
      ref_key: "$wrapper",
      ref: o,
      size: i.size,
      css: a
    }, {
      default: W(() => [
        (m(), w(E(i.from.transition.component), {
          ref_key: "$from",
          ref: s,
          rsc: i.from,
          size: i.size,
          css: u
        }, null, 8, ["rsc", "size"]))
      ]),
      _: 1
    }, 8, ["size"]));
  }
}), qe = /* @__PURE__ */ $({
  __name: "Slide",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = g(null), n = g(null), a = k({
      totalDuration: 1400,
      easing: "ease-in-out"
    });
    L(a, e.options);
    const u = `transform ${a.totalDuration}ms ${a.easing}`, c = {
      size: new R({
        width: e.size.width.value * 2,
        height: e.size.height.value
      }),
      css: {
        display: "flex",
        flexWrap: "nowrap"
      }
    };
    let l, i;
    ({
      [x.prev]: () => {
        l = e.to, i = e.from, c.css.transform = "translateX(-50%)";
      },
      [x.next]: () => {
        l = e.from, i = e.to;
      }
    })[a.direction]();
    const f = {
      [x.prev]: () => {
        o.value.transform({
          transition: u,
          transform: "translateX(0)"
        });
      },
      [x.next]: () => {
        o.value.transform({
          transition: u,
          transform: "translateX(-50%)"
        });
      }
    };
    return t({
      onPlay: () => {
        o.value !== null && f[a.direction]();
      },
      totalDuration: a.totalDuration
    }), (_, v) => (m(), w(d(ut), G({
      ref_key: "$wrapper",
      ref: o
    }, c), {
      default: W(() => [
        (m(), w(E(d(l).transition.component), {
          ref_key: "$left",
          ref: s,
          rsc: d(l),
          size: _.size
        }, null, 8, ["rsc", "size"])),
        (m(), w(E(d(i).transition.component), {
          ref_key: "$right",
          ref: n,
          rsc: d(i),
          size: _.size
        }, null, 8, ["rsc", "size"]))
      ]),
      _: 1
    }, 16));
  }
}), Qe = /* @__PURE__ */ $({
  __name: "Waterfall",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      rows: 1,
      cols: 10,
      tileDuration: 600,
      tileDelay: 90,
      easing: "cubic-bezier(0.55, 0.055, 0.675, 0.19)"
    });
    L(s, e.options);
    const n = s.tileDelay * s.cols + s.tileDuration, a = {
      [x.prev]: (c) => (s.cols - c - 1) * s.tileDelay,
      [x.next]: (c) => c * s.tileDelay
    };
    return t({
      onPlay: () => {
        o.value !== null && o.value.transform((c, l) => {
          const i = `all ${s.tileDuration}ms ${s.easing} ${a[s.direction](l)}ms`;
          c.transform({
            transition: i,
            opacity: "0.1",
            transform: "translateY(100%)"
          });
        });
      },
      totalDuration: n
    }), (c, l) => (m(), w(d(N), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: c.size,
      rsc: c.from
    }, null, 8, ["rows", "cols", "size", "rsc"]));
  }
}), ts = /* @__PURE__ */ $({
  __name: "Zip",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      rows: 1,
      cols: 10,
      tileDuration: 600,
      easing: "ease-in",
      tileDelay: 80
    });
    L(s, e.options);
    const n = s.tileDelay * s.cols + s.tileDuration, a = {
      [x.prev]: (c) => (s.cols - c - 1) * s.tileDelay,
      [x.next]: (c) => c * s.tileDelay
    };
    return t({
      onPlay: () => {
        o.value !== null && o.value.transform((c, l) => {
          const i = `all ${s.tileDuration}ms ${s.easing} ${a[s.direction](l)}ms`;
          c.transform({
            transition: i,
            opacity: "0.1",
            transform: `translateY(${l % 2 ? "-" : ""}100%)`
          });
        });
      },
      totalDuration: n
    }), (c, l) => (m(), w(d(N), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: c.size,
      rsc: c.from
    }, null, 8, ["rows", "cols", "size", "rsc"]));
  }
}), es = /* @__PURE__ */ $({
  __name: "Blinds2D",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      rows: 1,
      cols: 10,
      tileDuration: 800,
      easing: "linear",
      tileDelay: 100
    });
    L(s, e.options);
    const n = {
      [ot.front]: e.from
    }, a = s.tileDelay * s.cols + s.tileDuration, u = {
      prev: (l) => (s.cols - l - 1) * s.tileDelay,
      next: (l) => l * s.tileDelay
    };
    return t({
      onPlay: () => {
        o.value !== null && o.value.transform((l, i) => {
          const p = `all ${s.tileDuration}ms ${s.easing} ${u[s.direction](i)}ms`;
          l.transform({
            transition: p,
            opacity: "0.1",
            transform: "scaleX(0)"
          });
        });
      },
      totalDuration: a
    }), (l, i) => (m(), w(d(N), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: l.size,
      rscs: n
    }, null, 8, ["rows", "cols", "size"]));
  }
}), ss = /* @__PURE__ */ $({
  __name: "Blocks1",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    var c;
    const e = r, o = g(null), s = k({
      rows: 8,
      cols: 8,
      tileDuration: 300,
      easing: "linear",
      tileDelay: 1e3
    });
    if (L(s, e.options), !((c = e.options) != null && c.rows)) {
      const l = e.size.width.value / s.cols;
      s.rows = Y(e.size.height.value / l);
    }
    const n = s.tileDelay + s.tileDuration, a = () => Y(Math.random() * s.tileDelay);
    return t({
      onPlay: () => {
        o.value !== null && o.value.transform((l) => {
          const i = `all ${s.tileDuration}ms ${s.easing} ${a()}ms`;
          l.transform({
            transition: i,
            opacity: "0",
            transform: "scale(0.3, 0.3)"
          });
        });
      },
      totalDuration: n
    }), (l, i) => (m(), w(d(N), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: l.size,
      rsc: l.from
    }, null, 8, ["rows", "cols", "size", "rsc"]));
  }
}), os = /* @__PURE__ */ $({
  __name: "Blocks2",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    var _;
    const e = r, o = g(null), s = g(null), n = k({
      rows: 8,
      cols: 8,
      tileDuration: 800,
      tileDelay: 80,
      easing: "ease"
    });
    L(n, e.options);
    const a = n.tileDelay * (n.rows + n.cols) + n.tileDuration;
    if (!((_ = e.options) != null && _.rows)) {
      const v = e.size.width.value / n.cols;
      n.rows = Math.floor(e.size.height.value / v);
    }
    const u = {
      rsc: null,
      css: {
        position: "absolute",
        top: 0,
        left: 0,
        zIndex: 1
      }
    }, c = JSON.parse(JSON.stringify(u));
    c.css.zIndex = 2;
    let l = {};
    ({
      prev: () => {
        c.rsc = e.to, u.rsc = e.from, l = {
          opacity: 0,
          transform: "scale(0.3)"
        };
      },
      next: () => {
        c.rsc = e.from;
      }
    })[n.direction]();
    const p = (v) => {
      const S = o.value.getRowNumber(v, n.cols);
      let j = o.value.getColNumber(v, n.cols) + S;
      return n.direction === x.prev && (j = n.rows + n.cols - j - 1), j * n.tileDelay;
    }, f = {
      prev: () => {
        o.value.transform((v, S) => {
          v.transform({
            transition: `all ${n.tileDuration}ms ${n.easing} ${p(S)}ms`,
            opacity: 1,
            transform: "scale(1)"
          });
        });
      },
      next: () => {
        o.value.transform((v, S) => {
          v.transform({
            transition: `all ${n.tileDuration}ms ${n.easing} ${p(S)}ms`,
            opacity: 0,
            transform: "scale(0.3)"
          });
        });
      }
    };
    return t({
      onPlay: () => {
        o.value !== null && f[n.direction]();
      },
      totalDuration: a
    }), (v, S) => (m(), D("div", null, [
      J(d(N), G({
        ref_key: "$grid",
        ref: o,
        rows: n.rows,
        cols: n.cols,
        size: v.size,
        "tile-css": d(l)
      }, d(c)), null, 16, ["rows", "cols", "size", "tile-css"]),
      u.rsc !== null ? (m(), w(E(u.rsc.transition.component), G({
        key: 0,
        ref_key: "$background",
        ref: s,
        size: v.size
      }, u), null, 16, ["size"])) : T("", !0)
    ]));
  }
}), ns = /* @__PURE__ */ $({
  __name: "Concentric",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      circles: 7,
      tileDuration: 800,
      easing: "linear",
      tileDelay: 150
    });
    L(s, e.options);
    const n = s.tileDelay * s.circles + s.tileDuration, a = (c) => c * s.tileDelay;
    return t({
      onPlay: () => {
        if (o.value === null)
          return;
        const c = {
          prev: "-90",
          next: "90"
        };
        o.value.transform((l, i) => {
          const p = `all ${s.tileDuration}ms ${s.easing} ${a(i)}ms`;
          l.transform({
            transition: p,
            opacity: "0",
            transform: `rotateZ(${c[s.direction]}deg)`
          });
        });
      },
      totalDuration: n
    }), (c, l) => (m(), w(d(kt), {
      ref_key: "$vortex",
      ref: o,
      size: c.size,
      circles: s.circles,
      rsc: c.from
    }, null, 8, ["size", "circles", "rsc"]));
  }
}), rs = /* @__PURE__ */ $({
  __name: "Warp",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      circles: 7,
      tileDuration: 800,
      easing: "linear",
      tileDelay: 150
    });
    L(s, e.options);
    const n = s.tileDelay * s.circles + s.tileDuration, a = {
      [x.prev]: (l) => (s.circles - l - 1) * s.tileDelay,
      [x.next]: (l) => l * s.tileDelay
    }, u = (l) => l % 2 === 0 ? "-90" : "90";
    return t({
      onPlay: () => {
        o.value !== null && o.value.transform((l, i) => {
          const p = `all ${s.tileDuration}ms ${s.easing} ${a[s.direction](i)}ms`;
          l.transform({
            transition: p,
            opacity: "0",
            transform: `rotateZ(${u(i)}deg)`
          });
        });
      },
      totalDuration: n
    }), (l, i) => (m(), w(d(kt), {
      ref_key: "$vortex",
      ref: o,
      size: l.size,
      circles: s.circles,
      rsc: l.from
    }, null, 8, ["size", "circles", "rsc"]));
  }
}), is = /* @__PURE__ */ $({
  __name: "Camera",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = g(null), n = k({
      circles: 2,
      totalDuration: 900,
      easing: "cubic-bezier(0.385, 0, 0.795, 0.560)",
      backgroundColor: "#111"
    });
    L(n, e.options);
    const a = {
      alignSelf: "center",
      flex: "none"
    }, u = $t(
      e.size.toValue()
    ), c = new R({ width: u, height: u }), l = {
      boxSizing: "border-box",
      position: "absolute",
      display: "flex",
      justifyContent: "center",
      overflow: "hidden",
      borderRadius: "50%",
      border: "0 solid " + n.backgroundColor,
      top: (e.size.height.value - u) / 2 + "px",
      left: (e.size.width.value - u) / 2 + "px"
    };
    return t({
      onPlay: () => {
        [o.value, s.value].includes(null) || (o.value.transform({
          transition: `all ${n.totalDuration / 2 - 50}ms ${n.easing} 0ms`,
          borderWidth: u / 2 + "px"
        }), setTimeout(
          () => {
            s.value.hide(), o.value.transform({
              transition: `all ${n.totalDuration / 2 - 50}ms ${n.easing} 0ms`,
              borderWidth: 0
            });
          },
          n.totalDuration / 2 + 50
        ));
      },
      totalDuration: n.totalDuration
    }), (p, f) => (m(), w(d(ut), {
      ref_key: "$wrapper",
      ref: o,
      size: d(c),
      css: l
    }, {
      default: W(() => [
        (m(), w(E(p.from.transition.component), {
          ref_key: "$from",
          ref: s,
          size: p.size,
          rsc: p.from,
          css: a
        }, null, 8, ["size", "rsc"]))
      ]),
      _: 1
    }, 8, ["size"]));
  }
}), ls = /* @__PURE__ */ $({
  __name: "Cube",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      totalDuration: 1400,
      easing: "ease-out"
    });
    L(s, e.options), Object.assign(e.maskStyle, {
      perspective: "1600px",
      overflow: "visible"
    });
    const n = {
      front: e.from,
      left: e.to,
      right: e.to
    }, a = {
      transition: `all ${s.totalDuration}ms ${s.easing}`
    };
    return t({
      onPlay: () => {
        if (o.value === null)
          return;
        e.displayComponent.value !== null && e.displayComponent.hide();
        const c = {
          next: K.left,
          prev: K.right
        };
        o.value.turn(c[s.direction]);
      },
      totalDuration: s.totalDuration
    }), (c, l) => (m(), w(d(ct), {
      ref_key: "$cube",
      ref: o,
      rscs: n,
      size: c.size,
      depth: c.size.width.value,
      css: a
    }, null, 8, ["size", "depth"]));
  }
}), as = /* @__PURE__ */ $({
  __name: "Book",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = g(null), n = k({
      totalDuration: 1200,
      easing: "ease-out"
    });
    L(n, e.options);
    const a = new R({
      width: A(e.size.width.value / 2),
      height: e.size.height.value
    }), u = {
      perspective: "1600px",
      width: "100%",
      height: "100%"
    }, c = new I({
      top: 0,
      left: 0
    }), l = {
      position: "absolute",
      top: 0,
      left: 0
    }, i = {
      rscs: {
        front: e.from,
        back: e.to
      },
      offsets: {
        front: new I({
          top: 0,
          left: 0
        }),
        back: new I({
          top: 0,
          left: 0
        })
      },
      origin: void 0,
      css: {
        position: "absolute",
        top: 0,
        left: 0
      }
    }, p = A(e.size.width.value / 2), f = p.toString() + "px";
    e.maskStyle.overflow = "visible", {
      prev: () => {
        c.left.value = p, l.left = f, i.offsets.back.left.value = p, i.origin = "right center", i.css = {
          ...i.css
        };
      },
      next: () => {
        i.offsets.front.left.value = p, i.origin = "left center", i.css = {
          ...i.css,
          left: f
        };
      }
    }[n.direction]();
    const _ = {
      prev: "180",
      next: "-180"
    }[n.direction];
    return t({
      onPlay: () => {
        [o.value, s.value].includes(null) || s.value.transform({
          transition: `transform ${n.totalDuration}ms ${n.easing}`,
          transform: `rotateY(${_}deg)`
        });
      },
      totalDuration: n.totalDuration
    }), (S, B) => (m(), D("div", { style: u }, [
      (m(), w(E(S.from.transition.component), {
        ref_key: "$from",
        ref: o,
        rsc: S.from,
        size: S.size,
        "view-size": d(a),
        offset: d(c),
        css: l
      }, null, 8, ["rsc", "size", "view-size", "offset"])),
      J(d(ct), {
        ref_key: "$cube",
        ref: s,
        rscs: i.rscs,
        size: S.size,
        "view-size": d(a),
        offsets: i.offsets,
        origin: i.origin,
        css: i.css
      }, null, 8, ["rscs", "size", "view-size", "offsets", "origin", "css"])
    ]));
  }
}), cs = /* @__PURE__ */ $({
  __name: "Fall",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      totalDuration: 1600,
      easing: "ease-in"
    });
    L(s, e.options), Object.assign(e.maskStyle, {
      perspective: "1600px",
      overflow: "visible"
    });
    const n = {
      transformOrigin: "center bottom"
    };
    return t({
      onPlay: () => {
        o.value !== null && o.value.transform({
          transition: `transform ${s.totalDuration}ms ${s.easing}`,
          transform: "rotateX(-83.6deg)"
        });
      },
      totalDuration: s.totalDuration
    }), (u, c) => (m(), w(E(u.from.transition.component), {
      ref_key: "$from",
      ref: o,
      rsc: u.from,
      size: u.size,
      style: n
    }, null, 8, ["rsc", "size"]));
  }
}), us = /* @__PURE__ */ $({
  __name: "Wave",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      rows: 1,
      cols: 8,
      tileDuration: 900,
      tileDelay: 110,
      easing: "cubic-bezier(0.3, -0.3, 0.735, 0.285)",
      sideColor: "#333"
    });
    L(s, e.options), e.maskStyle.overflow = "visible";
    const n = {
      front: e.from,
      top: e.to
    }, a = {
      left: s.sideColor,
      right: s.sideColor
    }, u = {
      overflow: "visible",
      perspective: "1200px"
    }, c = s.tileDelay * s.cols + s.tileDuration, l = {
      [x.prev]: (p) => (s.cols - p - 1) * s.tileDelay,
      [x.next]: (p) => p * s.tileDelay
    };
    return t({
      onPlay: () => {
        o.value !== null && (e.displayComponent && e.displayComponent.hide(), o.value.transform((p, f) => {
          const y = `all ${s.tileDuration}ms ${s.easing} ${l[s.direction](f)}ms`;
          p.setCss({
            transition: y
          }), p.turn(K.bottom);
        }));
      },
      totalDuration: c
    }), (p, f) => (m(), w(d(N), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: p.size,
      rscs: n,
      colors: a,
      depth: p.size.height.value,
      css: u
    }, null, 8, ["rows", "cols", "size", "depth"]));
  }
}), ps = /* @__PURE__ */ $({
  __name: "Blinds3D",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      rows: 1,
      cols: 6,
      tileDuration: 800,
      easing: "ease-out",
      tileDelay: 150
    });
    L(s, e.options);
    const n = {
      perspective: "800px"
    }, a = {
      front: e.from,
      back: e.to
    }, u = s.tileDelay * s.cols + s.tileDuration;
    e.maskStyle.overflow = "visible";
    const c = {
      prev: (i) => (s.cols - i - 1) * s.tileDelay,
      next: (i) => i * s.tileDelay
    };
    return t({
      onPlay: () => {
        if (o.value === null)
          return;
        e.displayComponent && e.displayComponent.hide();
        const i = {
          prev: "backl",
          next: "backr"
        };
        o.value.transform((p, f) => {
          const y = `all ${s.tileDuration}ms ${s.easing} ${c[s.direction](f)}ms`;
          p.setCss({
            transition: y
          }), p.turn(i[s.direction]);
        });
      },
      totalDuration: u
    }), (i, p) => (m(), w(d(N), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: i.size,
      rscs: a,
      css: n
    }, null, 8, ["rows", "cols", "size"]));
  }
}), ds = /* @__PURE__ */ $({
  __name: "Round1",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    var p;
    const e = r, o = g(null), s = k({
      rows: 0,
      cols: 8,
      tileDuration: 800,
      easing: "ease-out",
      tileDelay: 150
    });
    L(s, e.options);
    const n = {
      front: e.from,
      back: e.to
    }, a = {
      perspective: "800px"
    };
    if (e.maskStyle.overflow = "visible", !((p = e.options) != null && p.rows)) {
      const f = e.size.width.value / s.cols;
      s.rows = Y(e.size.height.value / f);
    }
    const u = s.rows > s.cols ? s.rows : s.cols, c = s.tileDelay * u * 2, l = (f) => {
      const y = o.value.getRowNumber(f, s.cols);
      let v = o.value.getColNumber(f, s.cols) + y;
      return s.direction === x.prev && (v = s.rows + s.cols - v - 1), v * s.tileDelay;
    };
    return t({
      onPlay: () => {
        if (o.value === null)
          return;
        e.displayComponent && e.displayComponent.hide();
        const f = {
          [x.prev]: K.backl,
          [x.next]: K.backr
        };
        o.value.transform((y, _) => {
          const v = `all ${s.tileDuration}ms ${s.easing} ${l(_)}ms`;
          y.setCss({
            transition: v
          }), y.turn(f[s.direction]);
        });
      },
      totalDuration: c
    }), (f, y) => (m(), w(d(N), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: f.size,
      rscs: n,
      css: a
    }, null, 8, ["rows", "cols", "size"]));
  }
}), hs = /* @__PURE__ */ $({
  __name: "Round2",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    var i;
    const e = r, o = g(null), s = k({
      rows: 0,
      cols: 9,
      tileDuration: 800,
      tileDelay: 100,
      easing: "linear",
      rotateX: -540
    });
    L(s, e.options), e.maskStyle.overflow = "visible";
    const n = {
      perspective: "1200px"
    }, a = {
      backfaceVisibility: "hidden"
    };
    if (!((i = e.options) != null && i.rows)) {
      const p = e.size.width.value / s.cols;
      s.rows = Y(e.size.height.value / p);
    }
    const u = (s.cols / 2 + s.rows) * (s.tileDelay * 2), c = (p) => {
      const f = o.value.getRowNumber(p, s.cols), y = o.value.getColNumber(p, s.cols);
      let _, v;
      return s.direction === x.prev ? (_ = Math.abs(s.rows / 2 - 0.5 - f), v = Math.abs(s.cols - y)) : (_ = Math.abs(s.rows / 2 - 0.5 - f), v = Math.abs(y)), (_ + v - 1) * s.tileDelay;
    };
    return t({
      onPlay: () => {
        o.value !== null && o.value.transform((p, f) => {
          const y = `all ${s.tileDuration}ms ${s.easing} ${c(f)}ms`;
          p.transform({
            transition: y,
            opacity: "0",
            transform: `rotateY(${s.rotateX.toString()}deg)`
          });
        });
      },
      totalDuration: u
    }), (p, f) => (m(), w(d(N), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: p.size,
      depth: 0,
      rsc: p.from,
      css: n,
      "tile-css": a
    }, null, 8, ["rows", "cols", "size", "rsc"]));
  }
}), fs = /* @__PURE__ */ $({
  __name: "Explode",
  props: {
    size: {},
    from: {},
    to: {},
    options: {},
    maskStyle: {},
    displayComponent: {}
  },
  setup(r, { expose: t }) {
    const e = r, o = g(null), s = k({
      rows: 9,
      cols: 9,
      tileDuration: 300,
      easing: "linear",
      tileDelay: 100
    });
    L(s, e.options);
    const n = {
      overflow: "visible"
    };
    if (e.maskStyle.overflow = "visible", !e.options.rows) {
      const l = e.size.width.value / s.cols;
      s.rows = Y(e.size.height.value / l);
    }
    const a = (s.cols / 2 + s.rows / 2) * (s.tileDelay * 2), u = (l) => {
      const i = o.value.getRowNumber(l, s.cols), p = o.value.getColNumber(l, s.cols), f = Math.abs(s.rows / 2 - 0.5 - i), y = Math.abs(s.cols / 2 - 0.5 - p);
      return (f + y - 1) * s.tileDelay;
    };
    return t({
      onPlay: () => {
        o.value !== null && o.value.transform((l, i) => {
          const p = `all ${s.tileDuration}ms ${s.easing} ${u(i)}ms`;
          l.transform({
            transition: p,
            borderRadius: "100%",
            opacity: "0",
            transform: "scale(2)"
          });
        });
      },
      totalDuration: a
    }), (l, i) => (m(), w(d(N), {
      ref_key: "$grid",
      ref: o,
      rows: s.rows,
      cols: s.cols,
      size: l.size,
      rsc: l.from,
      css: n
    }, null, 8, ["rows", "cols", "size", "rsc"]));
  }
});
export {
  es as Blinds2D,
  ps as Blinds3D,
  ss as Blocks1,
  os as Blocks2,
  as as Book,
  is as Camera,
  ns as Concentric,
  ls as Cube,
  x as Directions,
  fs as Explode,
  Ue as Fade,
  cs as Fall,
  Q as FluxButton,
  je as FluxCaption,
  He as FluxControls,
  ct as FluxCube,
  N as FluxGrid,
  it as FluxImage,
  Ie as FluxIndex,
  Ge as FluxPagination,
  Xe as FluxParallax,
  Ke as FluxPreloader,
  Gt as FluxTransition,
  kt as FluxVortex,
  ut as FluxWrapper,
  Me as Img,
  Je as Kenburn,
  te as Player,
  Jt as PlayerResource,
  Zt as PlayerTransition,
  I as Position,
  F as ResizeTypes,
  Vt as Resource,
  ds as Round1,
  hs as Round2,
  ot as Sides,
  R as Size,
  qe as Slide,
  V as Statuses,
  Ze as Swipe,
  K as Turns,
  Ye as VueFlux,
  rs as Warp,
  Qe as Waterfall,
  us as Wave,
  ts as Zip,
  L as useTransition
};
