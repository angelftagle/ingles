import { AllowedComponentProps } from 'vue';
import { Component } from 'vue';
import { ComponentCustomProps } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { ComputedRef } from 'vue';
import { CSSProperties } from 'vue';
import { DefineComponent } from 'vue';
import { ExtractPropTypes } from 'vue';
import { PropType } from 'vue';
import { Ref } from 'vue';
import { VNodeProps } from 'vue';

declare type __VLS_NonUndefinedable<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_10<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_11<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_12<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_13<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_14<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_15<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_16<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_17<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_18<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_19<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_2<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_20<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_21<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_22<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_23<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_24<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_25<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_26<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_27<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_28<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_29<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_3<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_30<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_31<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_32<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_33<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_4<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_5<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_6<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_7<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_8<T> = T extends undefined ? never : T;

declare type __VLS_NonUndefinedable_9<T> = T extends undefined ? never : T;

declare type __VLS_Prettify<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_2<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_3<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_4<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_5<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_6<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_Prettify_7<T> = {
    [K in keyof T]: T[K];
} & {};

declare type __VLS_TypePropsToRuntimeProps<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_10<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_10<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_11<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_11<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_12<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_12<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_13<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_13<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_14<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_14<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_15<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_15<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_16<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_16<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_17<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_17<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_18<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_18<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_19<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_19<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_2<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_2<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_20<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_20<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_21<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_21<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_22<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_22<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_23<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_23<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_24<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_24<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_25<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_25<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_26<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_26<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_27<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_27<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_28<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_28<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_29<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_29<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_3<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_3<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_30<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_30<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_31<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_31<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_32<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_32<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_33<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_33<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_4<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_4<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_5<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_5<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_6<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_6<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_7<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_7<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_8<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_8<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_TypePropsToRuntimeProps_9<T> = {
    [K in keyof T]-?: {} extends Pick<T, K> ? {
        type: PropType<__VLS_NonUndefinedable_9<T[K]>>;
    } : {
        type: PropType<T[K]>;
        required: true;
    };
};

declare type __VLS_WithDefaults<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_2<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_2<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_3<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_3<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_4<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_4<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_5<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_5<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_6<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_6<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithDefaults_7<P, D> = {
    [K in keyof Pick<P, keyof P>]: K extends keyof D ? __VLS_Prettify_7<P[K] & {
        default: D[K];
    }> : P[K];
};

declare type __VLS_WithTemplateSlots<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_2<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_3<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_4<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_5<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_6<T, S> = T & {
    new (): {
        $slots: S;
    };
};

declare type __VLS_WithTemplateSlots_7<T, S> = T & {
    new (): {
        $slots: S;
    };
};

export declare const Blinds2D: DefineComponent<__VLS_TypePropsToRuntimeProps_20<Blinds2DProps>, {
    onPlay: () => void;
    totalDuration: number;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_20<Blinds2DProps>>>, {}, {}>;

export declare interface Blinds2DConf extends TransitionConf {
    rows: number;
    cols: number;
    tileDuration: number;
    tileDelay: number;
}

export declare interface Blinds2DProps extends TransitionProps {
}

export declare const Blinds3D: DefineComponent<__VLS_TypePropsToRuntimeProps_30<Blinds3DProps>, {
    onPlay: () => void;
    totalDuration: number;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_30<Blinds3DProps>>>, {}, {}>;

export declare interface Blinds3DConf extends TransitionConf {
    rows: number;
    cols: number;
    tileDuration: number;
    tileDelay: number;
}

export declare interface Blinds3DProps extends TransitionProps {
}

export declare const Blocks1: DefineComponent<__VLS_TypePropsToRuntimeProps_21<Blocks1Props>, {
    onPlay: () => void;
    totalDuration: number;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_21<Blocks1Props>>>, {}, {}>;

export declare interface Blocks1Conf extends TransitionConf {
    rows: number;
    cols: number;
    tileDuration: number;
    tileDelay: number;
}

export declare interface Blocks1Props extends TransitionProps {
}

export declare const Blocks2: DefineComponent<__VLS_TypePropsToRuntimeProps_22<Blocks2Props>, {
    onPlay: () => void;
    totalDuration: number;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_22<Blocks2Props>>>, {}, {}>;

export declare interface Blocks2Conf extends TransitionConf {
    rows: number;
    cols: number;
    tileDuration: number;
    tileDelay: number;
}

export declare interface Blocks2Props extends TransitionProps {
}

export declare const Book: DefineComponent<__VLS_TypePropsToRuntimeProps_27<BookProps>, {
    onPlay: () => void;
    totalDuration: number | undefined;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_27<BookProps>>>, {}, {}>;

export declare interface BookConf extends TransitionConf {
}

export declare interface BookProps extends TransitionProps {
}

export declare const Camera: DefineComponent<__VLS_TypePropsToRuntimeProps_25<CameraProps>, {
    onPlay: () => void;
    totalDuration: number | undefined;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_25<CameraProps>>>, {}, {}>;

export declare interface CameraConf extends TransitionConf {
    circles: number;
    backgroundColor: string;
}

export declare interface CameraProps extends TransitionProps {
}

export declare interface ComponentProps {
    color?: string;
    rsc?: Resource;
    size: Size;
    viewSize?: Size;
    offset?: Position;
    css?: CSSProperties;
}

export declare interface ComponentStyles {
    base?: CSSProperties;
    color?: CSSProperties;
    rsc?: CSSProperties;
    size?: CSSProperties;
}

export declare const Concentric: DefineComponent<__VLS_TypePropsToRuntimeProps_23<ConcentricProps>, {
    onPlay: () => void;
    totalDuration: number;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_23<ConcentricProps>>>, {}, {}>;

export declare interface ConcentricConf extends TransitionConf {
    circles: number;
    tileDuration: number;
    tileDelay: number;
}

export declare interface ConcentricProps extends TransitionProps {
}

declare namespace Controllers {
    export {
        Display,
        Keys,
        Mouse,
        Timers,
        Touches,
        Directions,
        Statuses,
        PlayerResource,
        PlayerTransition,
        Player,
        Direction
    }
}

export declare const Cube: DefineComponent<__VLS_TypePropsToRuntimeProps_26<CubeProps>, {
    onPlay: () => void;
    totalDuration: number | undefined;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_26<CubeProps>>>, {}, {}>;

export declare interface CubeConf extends TransitionConf {
}

export declare interface CubeProps extends TransitionProps {
}

export declare type Direction = Directions.prev | Directions.next;

export declare enum Directions {
    prev = "prev",
    next = "next"
}

declare class Display {
    node: Ref<null | HTMLElement | Component>;
    config: VueFluxConfig | null;
    emit: null | Function;
    size: Size;
    constructor(node: Ref<null | HTMLElement | Component>, config?: VueFluxConfig | null, emit?: null | Function);
    static getSize(node: Ref<null | HTMLElement | Component>): Promise<Size>;
    addResizeListener(): void;
    removeResizeListener(): void;
    getAspectRatio(): number[];
    updateSize(): Promise<void>;
    inFullScreen: () => boolean;
    toggleFullScreen(): void;
    enterFullScreen(): Promise<void>;
    exitFullScreen(): Promise<void>;
}

export declare interface DisplayParameter {
    component: Component;
    props: {};
}

export declare const Explode: DefineComponent<__VLS_TypePropsToRuntimeProps_33<ExplodeProps>, {
    onPlay: () => void;
    totalDuration: number;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_33<ExplodeProps>>>, {}, {}>;

export declare interface ExplodeConf extends TransitionConf {
    rows: number;
    cols: number;
    tileDuration: number;
    tileDelay: number;
}

export declare interface ExplodeProps extends TransitionProps {
}

export declare const Fade: DefineComponent<__VLS_TypePropsToRuntimeProps_14<FadeProps>, {
    onPlay: () => void;
    totalDuration: number | undefined;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_14<FadeProps>>>, {}, {}>;

export declare interface FadeConf extends TransitionConf {
}

export declare interface FadeProps extends TransitionProps {
}

export declare const Fall: DefineComponent<__VLS_TypePropsToRuntimeProps_28<FallProps>, {
    onPlay: () => void;
    totalDuration: number | undefined;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_28<FallProps>>>, {}, {}>;

export declare interface FallConf extends TransitionConf {
}

export declare interface FallProps extends TransitionProps {
}

export declare const FluxButton: __VLS_WithTemplateSlots<DefineComponent<{}, {}, {}, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<{}>>, {}, {}>, {
    default?(_: {}): any;
}>;

export declare const FluxCaption: __VLS_WithTemplateSlots_5<DefineComponent<__VLS_TypePropsToRuntimeProps_9<Props>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_9<Props>>>, {}, {}>, {
    default?(_: {
        caption: string;
    }): any;
}>;

export declare const FluxControls: DefineComponent<__VLS_WithDefaults_6<__VLS_TypePropsToRuntimeProps_10<Props_2>, {
    mouseOver: undefined;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_6<__VLS_TypePropsToRuntimeProps_10<Props_2>, {
    mouseOver: undefined;
}>>>, {
    mouseOver: boolean | Ref<boolean>;
}, {}>;

export declare const FluxCube: DefineComponent<__VLS_WithDefaults_5<__VLS_TypePropsToRuntimeProps_8<FluxCubeProps>, {
    rscs: () => {};
    colors: () => {};
    offsets: () => {};
    depth: number;
    viewSize: () => Size;
}>, {
    setCss: (s: CSSProperties) => void;
    transform: (s: CSSProperties) => void;
    show: () => void;
    hide: () => void;
    turn: (turn: "top" | "left" | "right" | "bottom" | "front" | "back" | "backr" | "backl") => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_5<__VLS_TypePropsToRuntimeProps_8<FluxCubeProps>, {
    rscs: () => {};
    colors: () => {};
    offsets: () => {};
    depth: number;
    viewSize: () => Size;
}>>>, {
    viewSize: Size;
    depth: number;
    colors: SidesColors;
    rscs: SidesResources;
    offsets: SidesOffsets;
}, {}>;

export declare interface FluxCubeProps extends ComponentProps {
    colors?: SidesColors;
    rscs?: SidesResources;
    offsets?: SidesOffsets;
    depth?: number;
    origin?: string;
}

export declare const FluxGrid: DefineComponent<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<FluxGridProps>, {
    rows: number;
    cols: number;
    depth: number;
}>, {
    setCss: (s: CSSProperties) => void;
    transform: (cb: Function) => void;
    show: () => void;
    hide: () => void;
    getRowNumber: typeof getRowNumber;
    getColNumber: typeof getColNumber;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_WithDefaults<__VLS_TypePropsToRuntimeProps<FluxGridProps>, {
    rows: number;
    cols: number;
    depth: number;
}>>>, {
    depth: number;
    rows: number;
    cols: number;
}, {}>;

export declare interface FluxGridProps extends ComponentProps {
    colors?: SidesColors;
    rscs?: SidesResources;
    rows?: number;
    cols?: number;
    depth?: number;
    tileCss?: CSSProperties;
}

export declare interface FluxGridTileProps {
    color?: string;
    colors?: SidesColors;
    rsc?: Resource;
    rscs?: SidesResources;
    size: Size;
    depth: number;
    offset: Position;
    viewSize?: Size;
    css?: CSSProperties;
}

export declare const FluxImage: DefineComponent<__VLS_TypePropsToRuntimeProps_2<FluxImageProps>, {
    setCss: (s: CSSProperties) => void;
    transform: (s: CSSProperties) => void;
    show: () => void;
    hide: () => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_2<FluxImageProps>>>, {}, {}>;

declare interface FluxImageProps extends ComponentProps {
}

export declare const FluxIndex: DefineComponent<__VLS_WithDefaults_7<__VLS_TypePropsToRuntimeProps_11<Props_3>, {
    mouseOver: undefined;
}>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_7<__VLS_TypePropsToRuntimeProps_11<Props_3>, {
    mouseOver: undefined;
}>>>, {
    mouseOver: boolean | Ref<boolean>;
}, {}>;

export declare const FluxPagination: __VLS_WithTemplateSlots_6<DefineComponent<__VLS_TypePropsToRuntimeProps_12<Props_4>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_12<Props_4>>>, {}, {}>, {
    default?(_: {
        index: number;
        rsc: ResourceWithOptions;
        title: string;
        cssClass: string[];
    }): any;
}>;

export declare const FluxParallax: __VLS_WithTemplateSlots_2<DefineComponent<__VLS_WithDefaults_2<__VLS_TypePropsToRuntimeProps_3<FluxParallaxProps>, {
    holder: () => Window & {
        MSStream: any;
    };
    type: string;
    offset: string;
}>, {
    resize: () => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_2<__VLS_TypePropsToRuntimeProps_3<FluxParallaxProps>, {
    holder: () => Window & {
        MSStream: any;
    };
    type: string;
    offset: string;
}>>>, {
    offset: string;
    type: "visible" | "fixed" | "relative";
    holder: any;
}, {}>, {
    default?(_: {}): any;
}>;

export declare interface FluxParallaxProps {
    rsc: Resource;
    holder?: any;
    type?: 'visible' | 'relative' | 'fixed';
    offset?: string;
}

export declare const FluxPreloader: __VLS_WithTemplateSlots_7<DefineComponent<__VLS_TypePropsToRuntimeProps_13<Props_5>, {}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_13<Props_5>>>, {}, {}>, {
    default?(_: {
        loader: Ref<ResourceLoader | null>;
        preloading: number | undefined;
        lazyloading: number | undefined;
        pct: Ref<number> | undefined;
    }): any;
}>;

export declare const FluxTransition: DefineComponent<__VLS_WithDefaults_3<__VLS_TypePropsToRuntimeProps_4<FluxTransitionProps>, {
    options: () => {};
}>, {
    start: typeof start;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    end: (...args: any[]) => void;
    start: (...args: any[]) => void;
    ready: (...args: any[]) => void;
}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_3<__VLS_TypePropsToRuntimeProps_4<FluxTransitionProps>, {
    options: () => {};
}>>> & {
    onEnd?: ((...args: any[]) => any) | undefined;
    onStart?: ((...args: any[]) => any) | undefined;
    onReady?: ((...args: any[]) => any) | undefined;
}, {
    options: Object;
}, {}>;

export declare interface FluxTransitionProps {
    size: Size;
    transition: Object;
    from: Resource;
    to: Resource;
    displayComponent?: null | any;
    options?: Object;
}

export declare const FluxVortex: DefineComponent<__VLS_WithDefaults_4<__VLS_TypePropsToRuntimeProps_5<FluxVortexProps>, {
    circles: number;
}>, {
    setCss: (s: CSSProperties) => void;
    transform: (cb: Function) => void;
    show: () => void;
    hide: () => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_WithDefaults_4<__VLS_TypePropsToRuntimeProps_5<FluxVortexProps>, {
    circles: number;
}>>>, {
    circles: number;
}, {}>;

export declare interface FluxVortexCirclesProps {
    offset: Position;
    css: CSSProperties;
}

export declare interface FluxVortexProps extends ComponentProps {
    rsc: Resource;
    circles?: number;
    tileCss?: CSSProperties;
}

export declare const FluxWrapper: __VLS_WithTemplateSlots_3<DefineComponent<__VLS_TypePropsToRuntimeProps_6<FluxWrapperProps>, {
    setCss: (s: CSSProperties) => void;
    transform: (s: CSSProperties) => void;
    show: () => void;
    hide: () => void;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_6<FluxWrapperProps>>>, {}, {}>, {
    default?(_: {}): any;
}>;

export declare interface FluxWrapperProps extends ComponentProps {
}

declare function getColNumber(tileNumber: number, numCols: number): number;

declare function getRowNumber(tileNumber: number, numCols: number): number;

export declare class Img extends Resource {
    constructor(src: string, caption?: string, resizeType?: ResizeType, backgroundColor?: null | string);
    load(): Promise<void>;
    onLoad(img: HTMLImageElement, resolve: Function): void;
    onError(reject: Function): void;
}

export declare const Kenburn: DefineComponent<__VLS_TypePropsToRuntimeProps_15<KenburnProps>, {
    onPlay: () => void;
    totalDuration: number | undefined;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_15<KenburnProps>>>, {}, {}>;

export declare interface KenburnConf extends TransitionConf {
}

export declare interface KenburnProps extends TransitionProps {
}

declare class Keys {
    config: VueFluxConfig;
    player: Player;
    constructor(config: VueFluxConfig, player: Player);
    setup(): void;
    addKeyListener(): void;
    removeKeyListener(): void;
    keydown(event: KeyboardEvent): void;
}

declare class Mouse {
    isOver: Ref<boolean>;
    setup(config: VueFluxConfig, timers: Timers): void;
    toggle(config: VueFluxConfig, timers: Timers, over: boolean): void;
    out(config: VueFluxConfig, timers: Timers): void;
    over(config: VueFluxConfig, timers: Timers): void;
}

export declare class Player {
    resource: PlayerResource;
    transition: PlayerTransition;
    status: Ref<keyof typeof Statuses>;
    config: VueFluxConfig;
    timers: Timers;
    emit: Function;
    resources: Resources;
    transitions: Transitions;
    $displayComponent: Ref<null | Component>;
    constructor(config: VueFluxConfig, timers: Timers, emit: Function);
    setup($displayComponent: Ref<null | Component>): void;
    play(resourceIndex?: number | Direction, delay?: number): void;
    stop(cancelTransition?: boolean): Promise<void>;
    isReadyToShow(): boolean;
    show(resourceIndex?: number | Direction, transitionIndex?: number | Direction): Promise<void>;
    start(): void;
    end(cancel?: boolean): Promise<void>;
}

export declare class PlayerResource {
    current: ResourceIndex | null;
    from: ResourceIndex | null;
    to: ResourceIndex | null;
    reset(): void;
    init(repository: Resources): void;
}

export declare class PlayerTransition {
    current: TransitionIndex | null;
    last: TransitionIndex | null;
    reset(): void;
    init(transitions: Transitions): void;
}

export declare class Position {
    top: Ref<null | number>;
    left: Ref<null | number>;
    constructor({ top, left, }?: {
        top?: null | number;
        left?: null | number;
    });
    reset(): void;
    isValid(): boolean;
    update({ top, left }: {
        top?: null | number;
        left?: null | number;
    }): void;
    toValue(): {
        top?: number | undefined;
        left?: number | undefined;
    };
    toPx(): {
        top: string;
        left: string;
    };
}

declare interface Props {
    player: Player;
}

declare interface Props_2 {
    mouseOver?: boolean | Ref<boolean>;
    player: Player;
}

declare interface Props_3 {
    mouseOver?: boolean | Ref<boolean>;
    displaySize: Size;
    player: Player;
}

declare interface Props_4 {
    player: Player;
}

declare interface Props_5 {
    loader: Ref<null | ResourceLoader>;
}

export declare interface ResizedProps {
    width: number;
    height: number;
    top: number;
    left: number;
}

export declare type ResizeType = keyof typeof ResizeTypes;

export declare enum ResizeTypes {
    fill = "fill",
    fit = "fit"
}

export declare abstract class Resource {
    src: string;
    loader: Promise<void> | null;
    errorMessage: string;
    status: Ref<Statuses_2>;
    realSize: Size;
    displaySize: Size;
    caption: string;
    resizeType: ResizeType;
    backgroundColor: null | string;
    display: DisplayParameter;
    transition: TransitionParameter;
    constructor(src: string, caption: string, resizeType: "fill" | "fit" | undefined, backgroundColor: string | null | undefined, display: DisplayParameter, transition: TransitionParameter, errorMessage: string);
    isLoading: () => boolean;
    isLoaded: () => boolean;
    isError: () => boolean;
    abstract load(): Promise<void>;
    abstract onLoad(el: any, resolve: Function): void;
    abstract onError(reject: Function): void;
    calcResizeProps(displaySize: Size): {
        top?: number | undefined;
        left?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
    };
    resizeProps: ComputedRef<{
        top?: number | undefined;
        left?: number | undefined;
        width?: number | undefined;
        height?: number | undefined;
    }>;
    getResizeProps(size: Size, offset?: Position): ResizedProps;
}

declare interface ResourceIndex {
    index: number;
    rsc: Resource;
    options: {
        delay?: number;
        stop?: boolean;
    };
}

declare class ResourceLoader {
    rscs: ResourceWithOptions[];
    counter: {
        success: number;
        error: number;
        total: number;
    };
    toPreload: number;
    preLoading: ResourceWithOptions[];
    lazyLoading: ResourceWithOptions[];
    progress: Ref<number>;
    displaySize: Size;
    onPreloadStart: Function;
    onPreloadEnd: Function;
    onLazyLoadStart: Function;
    onLazyLoadEnd: Function;
    constructor(rscs: ResourceWithOptions[], toPreload: number, displaySize: Size, onPreloadStart: Function, onPreloadEnd: Function, onLazyLoadStart: Function, onLazyLoadEnd: Function);
    preloadStart(): void;
    preloadEnd(): void;
    lazyLoadStart(): void;
    lazyLoadEnd(): void;
    load(rsc: ResourceWithOptions): void;
    loadSuccess(rsc: ResourceWithOptions): void;
    loadError(error: string): void;
    updateProgress(): void;
}

declare class Resources {
    list: ResourceWithOptions[];
    loader: Ref<ResourceLoader | null>;
    emit: Function;
    constructor(emit: Function);
    private getPrev;
    private getNext;
    getFirst(): ResourceIndex;
    getLast(): ResourceIndex;
    getByIndex(index: number): ResourceIndex;
    getByOrder(order: Direction, currentIndex: number): ResourceIndex;
    find(by: number | Direction, currentIndex?: number): ResourceIndex;
    update(rscs: (Resource | ResourceWithOptions)[], numToPreload: number, displaySize: Size): Promise<void>;
    preloadStart(): void;
    preloadEnd(loaded: ResourceWithOptions[], resolve: Function): void;
    lazyLoadStart(): void;
    lazyLoadEnd(loaded: ResourceWithOptions[]): void;
}

export declare interface ResourceWithOptions {
    resource: Resource;
    options: {
        delay?: number;
        stop?: boolean;
    };
}

export declare const Round1: DefineComponent<__VLS_TypePropsToRuntimeProps_31<Round1Props>, {
    onPlay: () => void;
    totalDuration: number;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_31<Round1Props>>>, {}, {}>;

export declare interface Round1Conf extends TransitionConf {
    rows: number;
    cols: number;
    tileDuration: number;
    tileDelay: number;
}

export declare interface Round1Props extends TransitionProps {
}

export declare const Round2: DefineComponent<__VLS_TypePropsToRuntimeProps_32<Round2Props>, {
    onPlay: () => void;
    totalDuration: number;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_32<Round2Props>>>, {}, {}>;

export declare interface Round2Conf extends TransitionConf {
    rows: number;
    cols: number;
    tileDuration: number;
    tileDelay: number;
    rotateX: number;
}

export declare interface Round2Props extends TransitionProps {
}

export declare type Side = keyof typeof Sides;

export declare interface SideProps {
    name: string;
    component: any;
    rsc?: Resource;
    size: Size;
    viewSize: Size;
    color?: string;
    offset?: Position;
    style: CSSProperties;
}

export declare enum Sides {
    front = "front",
    back = "back",
    left = "left",
    right = "right",
    top = "top",
    bottom = "bottom"
}

export declare interface SidesColors {
    [Sides.front]?: string;
    [Sides.back]?: string;
    [Sides.left]?: string;
    [Sides.right]?: string;
    [Sides.top]?: string;
    [Sides.bottom]?: string;
}

export declare interface SidesOffsets {
    [Sides.front]?: Position;
    [Sides.back]?: Position;
    [Sides.left]?: Position;
    [Sides.right]?: Position;
    [Sides.top]?: Position;
    [Sides.bottom]?: Position;
}

export declare interface SidesProps {
    [Sides.front]?: SideProps;
    [Sides.back]?: SideProps;
    [Sides.left]?: SideProps;
    [Sides.right]?: SideProps;
    [Sides.top]?: SideProps;
    [Sides.bottom]?: SideProps;
}

export declare interface SidesResources {
    [Sides.front]?: Resource;
    [Sides.back]?: Resource;
    [Sides.left]?: Resource;
    [Sides.right]?: Resource;
    [Sides.top]?: Resource;
    [Sides.bottom]?: Resource;
}

export declare class Size {
    width: Ref<null | number>;
    height: Ref<null | number>;
    constructor({ width, height, }?: {
        width?: null | number;
        height?: null | number;
    });
    reset(): void;
    isValid(): boolean;
    update({ width, height, }: {
        width?: null | number;
        height?: null | number;
    }): void;
    getAspectRatio(): number;
    clone(): Size;
    equals(otherSize: Size): boolean;
    toValue(): {
        width?: number | undefined;
        height?: number | undefined;
    };
    toPx(): {
        width: string;
        height: string;
    };
}

export declare const Slide: DefineComponent<__VLS_TypePropsToRuntimeProps_17<SlideProps>, {
    onPlay: () => void;
    totalDuration: number | undefined;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_17<SlideProps>>>, {}, {}>;

export declare interface SlideConf extends TransitionConf {
}

export declare interface SlideProps extends TransitionProps {
}

declare function start(): Promise<void>;

export declare enum Statuses {
    stopped = "stopped",
    playing = "playing"
}

declare enum Statuses_2 {
    notLoaded = "notLoaded",
    loading = "loading",
    loaded = "loaded",
    error = "error"
}

export declare const Swipe: DefineComponent<__VLS_TypePropsToRuntimeProps_16<SwipeProps>, {
    onPlay: () => void;
    totalDuration: number | undefined;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_16<SwipeProps>>>, {}, {}>;

export declare interface SwipeConf extends TransitionConf {
}

export declare interface SwipeProps extends TransitionProps {
}

declare class Timers {
    timers: TimersInterface;
    set(index: string, time: number, cb: Function): void;
    clear(index?: string): void;
}

declare interface TimersInterface {
    [index: string]: number;
}

declare class Touches {
    startX: number;
    startY: number;
    startTime: number;
    endTime: number;
    prevTouchTime: number;
    tapThreshold: number;
    doubleTapThreshold: number;
    slideTrigger: number;
    start(event: TouchEvent, config: VueFluxConfig): void;
    end(event: TouchEvent, config: VueFluxConfig, player: Player, display: Display, timers: Timers, mouse: Mouse): void;
    tap: (offsetX: number, offsetY: number) => boolean;
    doubleTap: () => boolean;
    slideLeft: (offsetX: number, display: Display) => boolean;
    slideRight: (offsetX: number, display: Display) => boolean;
    slideUp: (offsetY: number, display: Display) => boolean;
    slideDown: (offsetY: number, display: Display) => boolean;
}

export declare interface TransitionConf {
    totalDuration?: number;
    easing: string;
    direction?: Direction;
}

declare interface TransitionIndex {
    index: number;
    component: Component;
    options: {
        direction?: Direction;
    };
}

export declare interface TransitionParameter {
    component: Component;
    props: {};
}

export declare interface TransitionProps {
    size: Size;
    from: Resource;
    to?: Resource;
    options?: any;
    maskStyle: CSSProperties;
    displayComponent: any;
}

declare class Transitions {
    list: TransitionWithOptions[];
    private getPrev;
    private getNext;
    getFirst(): TransitionIndex;
    getLast(): TransitionIndex;
    getByIndex(index: number): TransitionIndex;
    getByOrder(direction: Direction, lastIndex: number): TransitionIndex;
    update(transitions: Object[]): void;
}

export declare interface TransitionWithOptions {
    component: Component;
    options: object;
}

export declare type Turn = keyof typeof Turns;

export declare enum Turns {
    front = "front",
    back = "back",
    backr = "backr",
    backl = "backl",
    left = "left",
    right = "right",
    top = "top",
    bottom = "bottom"
}

export declare function useTransition(conf: TransitionConf, options?: object): void;

export declare const VueFlux: __VLS_WithTemplateSlots_4<DefineComponent<__VLS_TypePropsToRuntimeProps_7<VueFluxProps>, {
    show: (resourceIndex?: number | Controllers.Direction, transitionIndex?: number | Controllers.Direction) => Promise<void>;
    play: (resourceIndex?: number | Controllers.Direction, delay?: number | undefined) => void;
    stop: (cancelTransition?: boolean) => Promise<void>;
    getPlayer: () => Controllers.Player;
    size: Size;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {
    created: () => void;
    mounted: () => void;
    unmounted: () => void;
    play: (resourceIndex: number | Controllers.Direction, delay?: number | undefined) => void;
    stop: () => void;
    show: (resource: Controllers.PlayerResource, transition: Controllers.PlayerTransition) => void;
    optionsUpdated: () => void;
    transitionsUpdated: () => void;
    resourcesPreloadStart: () => void;
    resourcesPreloadEnd: () => void;
    resourcesLazyloadStart: () => void;
    resourcesLazyloadEnd: () => void;
    fullscreenEnter: () => void;
    fullscreenExit: () => void;
    transitionStart: (resource: Controllers.PlayerResource, transition: Controllers.PlayerTransition) => void;
    transitionCancel: (resource: Controllers.PlayerResource, transition: Controllers.PlayerTransition) => void;
    transitionEnd: (resource: Controllers.PlayerResource, transition: Controllers.PlayerTransition) => void;
}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_7<VueFluxProps>>> & {
    onPlay?: ((resourceIndex: number | Controllers.Direction, delay?: number | undefined) => any) | undefined;
    onShow?: ((resource: Controllers.PlayerResource, transition: Controllers.PlayerTransition) => any) | undefined;
    onStop?: (() => any) | undefined;
    onResourcesPreloadStart?: (() => any) | undefined;
    onResourcesPreloadEnd?: (() => any) | undefined;
    onResourcesLazyloadStart?: (() => any) | undefined;
    onResourcesLazyloadEnd?: (() => any) | undefined;
    onCreated?: (() => any) | undefined;
    onMounted?: (() => any) | undefined;
    onUnmounted?: (() => any) | undefined;
    onOptionsUpdated?: (() => any) | undefined;
    onTransitionsUpdated?: (() => any) | undefined;
    onFullscreenEnter?: (() => any) | undefined;
    onFullscreenExit?: (() => any) | undefined;
    onTransitionStart?: ((resource: Controllers.PlayerResource, transition: Controllers.PlayerTransition) => any) | undefined;
    onTransitionCancel?: ((resource: Controllers.PlayerResource, transition: Controllers.PlayerTransition) => any) | undefined;
    onTransitionEnd?: ((resource: Controllers.PlayerResource, transition: Controllers.PlayerTransition) => any) | undefined;
}, {}, {}>, {
    preloader?(_: {
        loader: Ref<ResourceLoader | null>;
    }): any;
    caption?(_: {
        player: Controllers.Player;
    }): any;
    controls?(_: {
        mouseOver: Ref<boolean>;
        player: Controllers.Player;
    }): any;
    index?(_: {
        mouseOver: Ref<boolean>;
        displaySize: Size;
        player: Controllers.Player;
    }): any;
    pagination?(_: {
        player: Controllers.Player;
    }): any;
}>;

export declare interface VueFluxConfig {
    allowFullscreen: boolean;
    allowToSkipTransition: boolean;
    aspectRatio: string;
    autohideTime: number;
    autoplay: boolean;
    bindKeys: boolean;
    delay: number;
    enableGestures: boolean;
    infinite: boolean;
    lazyLoad: boolean;
    lazyLoadAfter: number;
}

export declare interface VueFluxEmits {
    (e: 'created'): void;
    (e: 'mounted'): void;
    (e: 'unmounted'): void;
    (e: 'play', resourceIndex: number | Direction, delay?: number): void;
    (e: 'stop'): void;
    (e: 'show', resource: PlayerResource, transition: PlayerTransition): void;
    (e: 'optionsUpdated'): void;
    (e: 'transitionsUpdated'): void;
    (e: 'resourcesPreloadStart'): void;
    (e: 'resourcesPreloadEnd'): void;
    (e: 'resourcesLazyloadStart'): void;
    (e: 'resourcesLazyloadEnd'): void;
    (e: 'fullscreenEnter'): void;
    (e: 'fullscreenExit'): void;
    (e: 'transitionStart', resource: PlayerResource, transition: PlayerTransition): void;
    (e: 'transitionCancel', resource: PlayerResource, transition: PlayerTransition): void;
    (e: 'transitionEnd', resource: PlayerResource, transition: PlayerTransition): void;
}

export declare interface VueFluxOptions {
    allowFullscreen?: boolean;
    allowToSkipTransition?: boolean;
    aspectRatio?: string;
    autohideTime?: number;
    autoplay?: boolean;
    bindKeys?: boolean;
    delay?: number;
    enableGestures?: boolean;
    infinite?: boolean;
    lazyLoad?: boolean;
    lazyLoadAfter?: number;
}

export declare interface VueFluxProps {
    options?: VueFluxOptions;
    rscs: (Resource | ResourceWithOptions)[];
    transitions: (Component | TransitionWithOptions)[];
}

export declare const Warp: DefineComponent<__VLS_TypePropsToRuntimeProps_24<WarpProps>, {
    onPlay: () => void;
    totalDuration: number;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_24<WarpProps>>>, {}, {}>;

export declare interface WarpConf extends TransitionConf {
    circles: number;
    tileDuration: number;
    tileDelay: number;
}

export declare interface WarpProps extends TransitionProps {
}

export declare const Waterfall: DefineComponent<__VLS_TypePropsToRuntimeProps_18<WaterfallProps>, {
    onPlay: () => void;
    totalDuration: number;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_18<WaterfallProps>>>, {}, {}>;

export declare interface WaterfallConf extends TransitionConf {
    rows: number;
    cols: number;
    tileDuration: number;
    tileDelay: number;
}

export declare interface WaterfallProps extends TransitionProps {
}

export declare const Wave: DefineComponent<__VLS_TypePropsToRuntimeProps_29<WaveProps>, {
    onPlay: () => void;
    totalDuration: number;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_29<WaveProps>>>, {}, {}>;

export declare interface WaveConf extends TransitionConf {
    rows: number;
    cols: number;
    tileDuration: number;
    tileDelay: number;
    sideColor: string;
}

export declare interface WaveProps extends TransitionProps {
}

export declare const Zip: DefineComponent<__VLS_TypePropsToRuntimeProps_19<ZipProps>, {
    onPlay: () => void;
    totalDuration: number;
}, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, {}, string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<__VLS_TypePropsToRuntimeProps_19<ZipProps>>>, {}, {}>;

export declare interface ZipConf extends TransitionConf {
    rows: number;
    cols: number;
    tileDuration: number;
    tileDelay: number;
}

export declare interface ZipProps extends TransitionProps {
}

export { }
